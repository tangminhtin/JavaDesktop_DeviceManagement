/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package net.devicemanagement.view;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import javax.swing.JOptionPane;
import net.devicemanagement.controller.InfoFilterImp;
import net.devicemanagement.view.model.Borrowing;
import net.devicemanagement.view.model.Employee;
import net.devicemanagement.view.model.Laptop;
import net.devicemanagement.view.model.Monitor;
import net.devicemanagement.view.model.Pc;
import net.devicemanagement.view.model.Phone;

/**
 *
 * @author Tuan Anh
 */
public class AddBorrowingDialog extends javax.swing.JDialog implements ActionListener {

    private HomeFrm homeFrm;
    private Phone phone;
    private Employee employee;
    private Pc pc;
    private Laptop laptop;
    private Monitor monitor;

    private List<Phone> phones;
    private List<Employee> employees;
    private List<Borrowing> borrowings;
    private List<Pc> pcs;
    private List<Laptop> laptops;
    private List<Monitor> monitors;

    /**
     * Creates new form AddSubjectDialog
     */
    public AddBorrowingDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        addActionListener();
        phone = null;
        pc = null;
        laptop = null;
        monitor = null;
        homeFrm = (HomeFrm) parent;
    }

    public AddBorrowingDialog(java.awt.Frame parent, boolean modal,
            List<Employee> employees, List<Phone> phones,
            List<Borrowing> borrowings, List<Pc> pcs, List<Laptop> laptops, List<Monitor> monitors) {
        this(parent, modal);
        // nhận các tham chiếu của employees, phones, borrowings, pcs, laptops, monitors
        this.employees = employees;
        this.phones = phones;
        this.borrowings = borrowings;
        this.pcs = pcs;
        this.laptops = laptops;
        this.monitors = monitors;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnBorrowing = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtDeviceIdToSearch = new javax.swing.JTextField();
        txtEmployeeIdToSearch = new javax.swing.JTextField();
        btnSearchDevice = new javax.swing.JButton();
        btnSearchEmployee = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        comboType = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtDeviceId = new javax.swing.JTextField();
        txtFullName = new javax.swing.JTextField();
        txtEmployeeId = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtDeviceName = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtBorrowingDate = new javax.swing.JTextField();
        txtDept = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtDeviceType = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("THÊM MỚI MƯỢN THIẾT BỊ");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Thêm mới mượn thiết bị");

        btnBorrowing.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnBorrowing.setText("Thêm mới");
        btnBorrowing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrowingActionPerformed(evt);
            }
        });

        btnClear.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnClear.setText("Xóa dữ liệu");

        btnCancel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnCancel.setText("Hủy bỏ");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin nhập liệu", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Mã nhân viên");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Số IMEI/Serial");

        txtDeviceIdToSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtEmployeeIdToSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtEmployeeIdToSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmployeeIdToSearchActionPerformed(evt);
            }
        });

        btnSearchDevice.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearchDevice.setText("Tìm thiết bị");
        btnSearchDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchDeviceActionPerformed(evt);
            }
        });

        btnSearchEmployee.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearchEmployee.setText("Tìm nhân viên");
        btnSearchEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchEmployeeActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setText("Loại thiết bị");

        comboType.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        comboType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Điện thoại", "PC", "Laptop", "Màn hình" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtDeviceIdToSearch)
                    .addComponent(txtEmployeeIdToSearch)
                    .addComponent(comboType, 0, 269, Short.MAX_VALUE))
                .addGap(74, 74, 74)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSearchEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchDevice, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtEmployeeIdToSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSearchEmployee)))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(txtDeviceIdToSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(btnSearchDevice)))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin mượn", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Mã nhân viên");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Họ và tên");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Phòng ban");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Số IMEI/Serial");

        txtDeviceId.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtFullName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtEmployeeId.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("Tên thiết bị");

        txtDeviceName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setText("Thời gian mượn");

        txtBorrowingDate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtDept.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel15.setText("Loại thiết bị");

        txtDeviceType.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel13)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtDeviceName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDeviceId, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDept, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFullName)
                            .addComponent(txtBorrowingDate)
                            .addComponent(txtDeviceType, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(53, 53, 53)
                        .addComponent(txtEmployeeId, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(196, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtEmployeeId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtDept, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtDeviceId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtDeviceName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDeviceType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtBorrowingDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(btnBorrowing, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(127, 127, 127)
                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 126, Short.MAX_VALUE)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClear)
                    .addComponent(btnCancel)
                    .addComponent(btnBorrowing))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnBorrowingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrowingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBorrowingActionPerformed

    private void txtEmployeeIdToSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmployeeIdToSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmployeeIdToSearchActionPerformed

    private void btnSearchDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchDeviceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSearchDeviceActionPerformed

    private void btnSearchEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchEmployeeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSearchEmployeeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddBorrowingDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddBorrowingDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddBorrowingDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddBorrowingDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AddBorrowingDialog dialog
                        = new AddBorrowingDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBorrowing;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnSearchDevice;
    private javax.swing.JButton btnSearchEmployee;
    private javax.swing.JComboBox<String> comboType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField txtBorrowingDate;
    private javax.swing.JTextField txtDept;
    private javax.swing.JTextField txtDeviceId;
    private javax.swing.JTextField txtDeviceIdToSearch;
    private javax.swing.JTextField txtDeviceName;
    private javax.swing.JTextField txtDeviceType;
    private javax.swing.JTextField txtEmployeeId;
    private javax.swing.JTextField txtEmployeeIdToSearch;
    private javax.swing.JTextField txtFullName;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        var obj = e.getSource();
        if (obj.equals(btnCancel)) {
            dispose();
        } else if (obj.equals(btnClear)) {
            clearInputData();
        } else if (obj.equals(btnBorrowing)) {
            addNewBorrowing();
        } else if (obj.equals(btnSearchEmployee)) {
            searchEmployee();
        } else if (obj.equals(btnSearchDevice)) {
            searchDevice();
        }
    }

    private void addActionListener() {
        btnSearchEmployee.addActionListener(this);
        btnSearchDevice.addActionListener(this);
        btnBorrowing.addActionListener(this);
        btnClear.addActionListener(this);
        btnCancel.addActionListener(this);
    }

    private void clearInputData() {
        var emptyText = "";
        txtDeviceIdToSearch.setText(emptyText);
        txtEmployeeIdToSearch.setText(emptyText);
        comboType.setSelectedIndex(0);
        txtEmployeeId.setText(emptyText);
        txtFullName.setText(emptyText);
        txtDeviceId.setText(emptyText);
        txtDept.setText(emptyText);
        txtDeviceName.setText(emptyText);
        txtDeviceType.setText(emptyText);
        txtBorrowingDate.setText(emptyText);
    }

    private void showMessage(String msg) {
        JOptionPane.showMessageDialog(rootPane, msg);
    }

    private void addNewBorrowing() {

        // kiểm tra khi người dùng chưa nhập thông tin thiết bị
        if (txtDeviceId.getText().isBlank() || txtDeviceName.getText().isBlank() || txtDeviceType.getText().isBlank()) {
            var msg = "Bạn chưa nhập thông tin thiết bị!";
            showMessage(msg);
        } else if (employee == null) {  // kiểm tra khi chưa có thông tin nhân viên
            var msg = "Vui lòng nhập vào mã nhân viên và số IMEI trước!";
            showMessage(msg);
        } else {
            // lấy thời gian hiện tại
            var currentTime = new Date();
            var format = "dd/MM/yyyy HH:mm:ss";
            var dateFormat = new SimpleDateFormat(format);
            txtBorrowingDate.setText(dateFormat.format(currentTime));
            var checker = new InfoFilterImp();
            String uniqueID = UUID.randomUUID().toString();
            Borrowing r = new Borrowing(employee, phone, pc, laptop, monitor, currentTime, uniqueID); // thêm vào danh sách mượn

            // kiểm tra danh sách mượn, xem có nhân viên nào đã mượn thiết bị bị đó chưa
            for (Borrowing b : borrowings) {
                // kiểm tra thiết bị điện thoại
                if (r.getPhone() != null && b.getPhone() != null && r.getPc() == null && r.getLaptop() == null && r.getMonitor() == null) {
                    if (b.getPhone().getImei() == r.getPhone().getImei()) {
                        var msg = "Thiết bị có IMEI '" + r.getPhone().getImei() + "' đã có người mượn trước đó";
                        phone = null;
                        showMessage(msg);
                        return;
                    }
                } else if (r.getPc() != null && b.getPc() != null && r.getPhone() == null && r.getLaptop() == null && r.getMonitor() == null) { // kiểm tra thiết bị pc
                    if (b.getPc().getSerial().equals(r.getPc().getSerial())) {
                        var msg = "Thiết bị có Serial '" + r.getPc().getSerial() + "' đã có người mượn trước đó";
                        pc = null;
                        showMessage(msg);
                        return;
                    }
                } else if (r.getLaptop() != null && b.getLaptop() != null && r.getPc() == null && r.getPhone() == null && r.getMonitor() == null) {    // kiểm tra thiết bị laptop
                    if (b.getLaptop().getSerial().equals(r.getLaptop().getSerial())) {
                        var msg = "Thiết bị có Serial '" + r.getLaptop().getSerial() + "' đã có người mượn trước đó";
                        laptop = null;
                        showMessage(msg);
                        return;
                    }
                } else if (r.getMonitor() != null && b.getMonitor() != null && r.getPc() == null && r.getLaptop() == null && r.getPhone() == null) {  // kiểm tra thiết bị monitor
                    if (b.getMonitor().getSerial().equals(r.getMonitor().getSerial())) {
                        var msg = "Thiết bị có Serial '" + r.getMonitor().getSerial() + "' đã có người mượn trước đó";
                        monitor = null;
                        showMessage(msg);
                        return;
                    }
                }
            }

            if (phone == null && pc == null && laptop == null & monitor == null) {
                return;
            }
            // kiểm tra xem mình đã mượn thiết bị hay chưa
            if (checker.isRecordExist(borrowings, r)) {
//                if (r.getPhone() != null) {
//                    var msg = "Nhân viên " + r.getEmployee().getFullName() + " đã "
//                            + "mượn điện thoại " + r.getPhone().getName() + " trước đó.";
//                    showMessage(msg);
//                } else if (r.getPc() != null) {
//                    var msg = "Nhân viên " + r.getEmployee().getFullName() + " đã "
//                            + "mượn điện thoại " + r.getPc().getName() + " trước đó.";
//                    showMessage(msg);
//                } else if (r.getLaptop() != null) {
//                    var msg = "Nhân viên " + r.getEmployee().getFullName() + " đã "
//                            + "mượn điện thoại " + r.getLaptop().getName() + " trước đó.";
//                    showMessage(msg);
//                } else if (r.getMonitor() != null) {
//                    var msg = "Nhân viên " + r.getEmployee().getFullName() + " đã "
//                            + "mượn điện thoại " + r.getMonitor().getName() + " trước đó.";
//                    showMessage(msg);
//                }
                if (r.getPhone() != null || r.getPc() != null || r.getLaptop() != null || r.getMonitor() != null) {
                    var msg = "Nhân viên " + r.getEmployee().getFullName() + " đã mượn sản phẩm này trước đó.";
                    showMessage(msg);
                }
            } else {
                // thêm mới vào bảng
                System.out.println(r);
                homeFrm.addBorrowingCallback(r);
                var msg = "Bạn đã mượn sản phẩm thành công!";
                showMessage(msg);
                phone = null;
                pc = null;
                laptop = null;
                monitor = null;
//                dispose();
            }
        }
    }

    private void searchEmployee() {
        employee = null;
        var employeeId = txtEmployeeIdToSearch.getText().trim().toUpperCase();
        if (employeeId.isEmpty()) {
            var msg = "Vui lòng nhập mã nhân viên cần tìm!";
            showMessage(msg);
        } else { //tìm kiếm nhân viên trong ds sv
            for (Employee s : employees) {
                if (s.getEmployeeId().compareTo(employeeId) == 0) { //nhân viên có tồn tại trong danh sách
                    employee = s;
                    break;
                }
            }
            if (employee != null) {
                txtEmployeeId.setText(employee.getEmployeeId());
                txtFullName.setText(employee.getFullName());
                txtDept.setText(employee.getEmployeeDept());
            } else {
                txtEmployeeId.setText("");
                txtFullName.setText("");
                txtDept.setText("");
                var msg = "Nhân viên cần tìm không tồn tại. Vui lòng thử lại!";
                showMessage(msg);
            }
        }

    }

    private void searchDevice() {
        var deviceIdStr = txtDeviceIdToSearch.getText();
        if (deviceIdStr.isEmpty()) {
            var msg = "Vui lòng nhập số IMEI/Serial thiết bị cần tìm!";
            showMessage(msg);
        } else { //tìm kiếm thiết bị trong ds các thiết bị  
            var s1 = "Điện thoại";
            var s2 = "PC";
            var s3 = "Laptop";
            var s4 = "Màn hình";
            var type = comboType.getSelectedItem().toString();
            if (type.equals(s1)) {
                try {   // try catch để bắt lỗi khi người dùng nhập chữ vào trường dữ liệu IMEI của phone
                    phone = null;
                    var phoneImei = Long.parseLong(deviceIdStr);
                    for (Phone p : phones) {
                        if (p.getImei() == phoneImei) {
                            phone = p;
                            break;
                        }
                    }
                    if (phone != null) {
                        txtDeviceId.setText(phone.getImei() + "");
                        txtDeviceName.setText(phone.getName());
                        txtDeviceType.setText(s1);
                    } else {
                        txtDeviceName.setText("");
                        txtDeviceId.setText("");
                        txtDeviceType.setText("");
                        var msg = "Điện thoại cần tìm không tồn tại. Vui lòng thử lại!";
                        showMessage(msg);
                    }
                } catch (NumberFormatException e) {
                    var msg = "Điện thoại cần tìm không tồn tại. Vui lòng thử lại!";
                    showMessage(msg);
                }

            } else if (type.equals(s2)) {
                pc = null;
                for (Pc p : pcs) {
                    if (p.getSerial().compareTo(deviceIdStr) == 0) {
                        pc = p;
                        break;
                    }
                }
                if (pc != null) {
                    txtDeviceId.setText(pc.getSerial());
                    txtDeviceName.setText(pc.getName());
                    txtDeviceType.setText(s2);
                } else {
                    txtDeviceName.setText("");
                    txtDeviceId.setText("");
                    txtDeviceType.setText("");
                    var msg = "PC cần tìm không tồn tại. Vui lòng thử lại!";
                    showMessage(msg);
                }
            } else if (type.equals(s3)) {
                laptop = null;
                for (Laptop p : laptops) {
                    if (p.getSerial().compareTo(deviceIdStr) == 0) {
                        laptop = p;
                        break;
                    }
                }
                if (laptop != null) {
                    txtDeviceId.setText(laptop.getSerial());
                    txtDeviceName.setText(laptop.getName());
                    txtDeviceType.setText(s3);
                } else {
                    txtDeviceName.setText("");
                    txtDeviceId.setText("");
                    txtDeviceType.setText("");
                    var msg = "Laptop cần tìm không tồn tại. Vui lòng thử lại!";
                    showMessage(msg);
                }
            } else if (type.equals(s4)) {
                monitor = null;
                for (Monitor p : monitors) {
                    if (p.getSerial().compareTo(deviceIdStr) == 0) {
                        monitor = p;
                        break;
                    }
                }
                if (monitor != null) {
                    txtDeviceId.setText(monitor.getSerial());
                    txtDeviceName.setText(monitor.getName());
                    txtDeviceType.setText(s4);
                } else {
                    txtDeviceName.setText("");
                    txtDeviceId.setText("");
                    txtDeviceType.setText("");
                    var msg = "Màn hình cần tìm không tồn tại. Vui lòng thử lại!";
                    showMessage(msg);
                }
            }
        }
    }
}
