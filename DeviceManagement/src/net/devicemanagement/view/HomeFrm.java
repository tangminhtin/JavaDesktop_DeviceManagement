/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package net.devicemanagement.view;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Hashtable;
import java.util.List;
import javax.print.attribute.Size2DSyntax;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.devicemanagement.controller.DataController;
import net.devicemanagement.controller.DataControllerImp;
import net.devicemanagement.controller.InfoFilterImp;
import net.devicemanagement.view.model.Borrowing;
import net.devicemanagement.view.model.Employee;
import net.devicemanagement.view.model.Laptop;
import net.devicemanagement.view.model.Monitor;
import net.devicemanagement.view.model.Pc;
import net.devicemanagement.view.model.Phone;
import net.devicemanagement.view.model.GiveBack;
import java.util.*;

/**
 *
 * @author Tuan Anh
 */
public class HomeFrm extends javax.swing.JFrame implements ActionListener {

    private List<Phone> phones; //tạo list các điện thoại
    private DefaultTableModel tableModelPhone;
    private DataController dataController;
    private List<Pc> pcs; //tạo list các PC
    private DefaultTableModel tableModelPc;
    private List<Laptop> laptops; //tạo list các laptop
    private DefaultTableModel tableModelLaptop;
    private List<Monitor> monitors; //tạo list các màn hình
    private DefaultTableModel tableModelMonitor;
    private List<Employee> employees; //tạo list các nhân viên
    private DefaultTableModel tableModelEmployee;
    private List<Borrowing> borrowings; //tạo list danh sách mượn
    private List<GiveBack> giveBacks; //tạo list danh sách trả
    private DefaultTableModel tableModelBorrowing;
    private DefaultTableModel tableModelGiveBack;
    private SimpleDateFormat simpleDateFormat;

    /**
     * Creates new form HomeFrm
     */
    public HomeFrm() {
        initComponents();
        setLocationRelativeTo(null);
        addButtonGroup(); //Phương thức chỉ chọn 1 radio button trong 1 nhóm
        addActionListener(); //Đăng kí sự kiện cho từng nút
        phones = new ArrayList<>();
        tableModelPhone = (DefaultTableModel) tblPhone.getModel();
        pcs = new ArrayList<>();
        tableModelPc = (DefaultTableModel) tblPc.getModel();
        laptops = new ArrayList<>();
        tableModelLaptop = (DefaultTableModel) tblLaptop.getModel();
        monitors = new ArrayList<>();
        tableModelMonitor = (DefaultTableModel) tblMonitor.getModel();
        employees = new ArrayList<>();
        tableModelEmployee = (DefaultTableModel) tblEmployee.getModel();
        tableModelBorrowing = (DefaultTableModel) tblBorrowing.getModel();
        tableModelGiveBack = (DefaultTableModel) tblGiveBack.getModel();
        //khi ứng dụng được kích hoạt, dữ liệu tự load và hiển thị lên
        dataController = new DataControllerImp();
        simpleDateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        LoadData();
        ShowData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupSortPhone = new javax.swing.ButtonGroup();
        buttonGroupSearchPhone = new javax.swing.ButtonGroup();
        buttonGroupSortPc = new javax.swing.ButtonGroup();
        buttonGroupSearchPc = new javax.swing.ButtonGroup();
        buttonGroupSortLaptop = new javax.swing.ButtonGroup();
        buttonGroupSearchLaptop = new javax.swing.ButtonGroup();
        buttonGroupSortMonitor = new javax.swing.ButtonGroup();
        buttonGroupSearchMonitor = new javax.swing.ButtonGroup();
        buttonGroupSortEmployee = new javax.swing.ButtonGroup();
        buttonGroupSearchEmployee = new javax.swing.ButtonGroup();
        buttonGroupSortBorrowing = new javax.swing.ButtonGroup();
        buttonGroupSearchBorrowing = new javax.swing.ButtonGroup();
        buttonGroupSortGiveBack = new javax.swing.ButtonGroup();
        buttonGroupSearchGiveBack = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        rbSortPhoneNameASC = new javax.swing.JRadioButton();
        rbSortPhoneNameDESC = new javax.swing.JRadioButton();
        rbSortPhonePhaseASC = new javax.swing.JRadioButton();
        rbSortPhonePhaseDESC = new javax.swing.JRadioButton();
        jPanel8 = new javax.swing.JPanel();
        rbSearchPhoneByImei = new javax.swing.JRadioButton();
        rbSearchPhoneByName = new javax.swing.JRadioButton();
        txtSearchPhoneByImei = new javax.swing.JTextField();
        txtSearchPhoneByName = new javax.swing.JTextField();
        rbSearchPhoneByPhase = new javax.swing.JRadioButton();
        comboSearchPhoneByPhase = new javax.swing.JComboBox<>();
        btnSearchPhone = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPhone = new javax.swing.JTable();
        btnAddPhone = new javax.swing.JButton();
        btnEditPhone = new javax.swing.JButton();
        btnRemovePhone = new javax.swing.JButton();
        btnRefreshPhone = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        rbSortChipPcASC = new javax.swing.JRadioButton();
        rbSortChipPcDESC = new javax.swing.JRadioButton();
        rbSortRamPcASC = new javax.swing.JRadioButton();
        rbSortRamPcDESC = new javax.swing.JRadioButton();
        jPanel10 = new javax.swing.JPanel();
        rbSearchPcBySerial = new javax.swing.JRadioButton();
        rbSearchPcByName = new javax.swing.JRadioButton();
        txtSearchPcBySerial = new javax.swing.JTextField();
        txtSearchPcByName = new javax.swing.JTextField();
        rbSearchPcByRam = new javax.swing.JRadioButton();
        btnSearchPc = new javax.swing.JButton();
        txtSearchPcByRam = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPc = new javax.swing.JTable();
        btnRefreshPc = new javax.swing.JButton();
        btnAddPc = new javax.swing.JButton();
        btnEditPc = new javax.swing.JButton();
        btnRemovePc = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        rbSortChipLaptopASC = new javax.swing.JRadioButton();
        rbSortChipLaptopDESC = new javax.swing.JRadioButton();
        rbSortRamLaptopASC = new javax.swing.JRadioButton();
        rbSortRamLaptopDESC = new javax.swing.JRadioButton();
        jPanel12 = new javax.swing.JPanel();
        rbSearchLaptopBySerial = new javax.swing.JRadioButton();
        rbSearchLaptopByName = new javax.swing.JRadioButton();
        txtSearchLaptopBySerial = new javax.swing.JTextField();
        txtSearchLaptopByName = new javax.swing.JTextField();
        rbSearchLaptopByRam = new javax.swing.JRadioButton();
        btnSearchLaptop = new javax.swing.JButton();
        txtSearchLaptopByRam = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblLaptop = new javax.swing.JTable();
        btnRefreshLaptop = new javax.swing.JButton();
        btnAddLaptop = new javax.swing.JButton();
        btnEditLaptop = new javax.swing.JButton();
        btnRemoveLaptop = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        rbSortNameMonitorASC = new javax.swing.JRadioButton();
        rbSortNameMonitorDESC = new javax.swing.JRadioButton();
        rbSortSizeMonitorASC = new javax.swing.JRadioButton();
        rbSortSizeMonitorDESC = new javax.swing.JRadioButton();
        jPanel14 = new javax.swing.JPanel();
        rbSearchMonitorBySerial = new javax.swing.JRadioButton();
        rbSearchMonitorByName = new javax.swing.JRadioButton();
        txtSearchMonitorBySerial = new javax.swing.JTextField();
        txtSearchMonitorByName = new javax.swing.JTextField();
        rbSearchMonitorBySize = new javax.swing.JRadioButton();
        btnSearchMonitor = new javax.swing.JButton();
        txtSearchMonitorBySize = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblMonitor = new javax.swing.JTable();
        btnRefreshMonitor = new javax.swing.JButton();
        btnAddMonitor = new javax.swing.JButton();
        btnEditMonitor = new javax.swing.JButton();
        btnRemoveMonitor = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        rbSortEmployeeNameASC = new javax.swing.JRadioButton();
        rbSortEmployeeNameDESC = new javax.swing.JRadioButton();
        rbSortEmployeeIdASC = new javax.swing.JRadioButton();
        rbSortEmployeeIdDESC = new javax.swing.JRadioButton();
        jPanel16 = new javax.swing.JPanel();
        rbSearchEmployeeById = new javax.swing.JRadioButton();
        rbSearchEmployeeByName = new javax.swing.JRadioButton();
        txtSearchEmployeeById = new javax.swing.JTextField();
        txtSearchEmployeeByName = new javax.swing.JTextField();
        rbSearchEmployeeByDept = new javax.swing.JRadioButton();
        comboSearchEmployeeByDept = new javax.swing.JComboBox<>();
        btnSearchEmployee = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblEmployee = new javax.swing.JTable();
        btnRefreshEmployee = new javax.swing.JButton();
        btnAddEmployee = new javax.swing.JButton();
        btnEditEmployee = new javax.swing.JButton();
        btnRemoveEmployee = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        rbSortBorrowingEmployeeNameASC = new javax.swing.JRadioButton();
        rbSortBorrowingEmployeeNameDESC = new javax.swing.JRadioButton();
        rbSortBorrowingDateASC = new javax.swing.JRadioButton();
        rbSortBorrowingDateDESC = new javax.swing.JRadioButton();
        jPanel18 = new javax.swing.JPanel();
        rbSearchBorrowingBySerial = new javax.swing.JRadioButton();
        rbSearchBorrowingByEmployeeName = new javax.swing.JRadioButton();
        txtSearchBorrowingBySerial = new javax.swing.JTextField();
        txtSearchBorrowingByName = new javax.swing.JTextField();
        rbSearchBorrowingByDate = new javax.swing.JRadioButton();
        btnSearchBorrowing = new javax.swing.JButton();
        txtSearchBorrowingFrom = new javax.swing.JTextField();
        txtSearchBorrowingTo = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblBorrowing = new javax.swing.JTable();
        btnRefreshBorrowing = new javax.swing.JButton();
        btnAddBorrowing = new javax.swing.JButton();
        btnRemoveBorrowing = new javax.swing.JButton();
        jPanel19 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        rbSortGiveBackNameASC = new javax.swing.JRadioButton();
        rbSortGiveBackNameDESC = new javax.swing.JRadioButton();
        rbSortGiveBackDateASC = new javax.swing.JRadioButton();
        rbSortGiveBackDateDESC = new javax.swing.JRadioButton();
        jPanel21 = new javax.swing.JPanel();
        rbSearchGiveBackBySerial = new javax.swing.JRadioButton();
        rbSearchGiveBackByEmployeeName = new javax.swing.JRadioButton();
        txtSearchGiveBackBySerial = new javax.swing.JTextField();
        txtSearchGiveBackByEmployeeName = new javax.swing.JTextField();
        rbSearchGiveBackByDate = new javax.swing.JRadioButton();
        btnSearchGiveBack = new javax.swing.JButton();
        txtSearchGiveBackFrom = new javax.swing.JTextField();
        txtSearchGiveBackTo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblGiveBack = new javax.swing.JTable();
        btnRefreshGiveBack = new javax.swing.JButton();
        jPanel23 = new javax.swing.JPanel();
        txtTotalBorrowing = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtTotalGiveBack = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jListEmployee = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();
        txtTotalEm = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        tblGiveBackHistory = new javax.swing.JTable();
        jScrollPane11 = new javax.swing.JScrollPane();
        tblBorrowingHistory = new javax.swing.JTable();
        comboSearchEmployeeByDept1 = new javax.swing.JComboBox<>();
        comboSearchEmployeeStaticstic = new javax.swing.JComboBox<>();
        btnSearchEmployee1 = new javax.swing.JButton();
        btnRefreshStaticstic = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("QUẢN LÝ THIẾT BỊ");
        setResizable(false);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sắp xếp điện thoại", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSortPhoneNameASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortPhoneNameASC.setText("Theo tên a-z");
        rbSortPhoneNameASC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortPhoneNameASCActionPerformed(evt);
            }
        });

        rbSortPhoneNameDESC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortPhoneNameDESC.setText("Theo tên z-a");

        rbSortPhonePhaseASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortPhonePhaseASC.setText("Theo giai đoạn a-z");
        rbSortPhonePhaseASC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortPhonePhaseASCActionPerformed(evt);
            }
        });

        rbSortPhonePhaseDESC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortPhonePhaseDESC.setText("Theo giai đoạn z-a");
        rbSortPhonePhaseDESC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortPhonePhaseDESCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSortPhoneNameASC)
                    .addComponent(rbSortPhoneNameDESC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSortPhonePhaseASC)
                    .addComponent(rbSortPhonePhaseDESC))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSortPhoneNameASC)
                    .addComponent(rbSortPhonePhaseASC))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSortPhoneNameDESC)
                    .addComponent(rbSortPhonePhaseDESC))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm điện thoại", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSearchPhoneByImei.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchPhoneByImei.setText("Theo IMEI");

        rbSearchPhoneByName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchPhoneByName.setText("Theo tên");
        rbSearchPhoneByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchPhoneByNameActionPerformed(evt);
            }
        });

        txtSearchPhoneByImei.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtSearchPhoneByImei.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchPhoneByImeiActionPerformed(evt);
            }
        });

        txtSearchPhoneByName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        rbSearchPhoneByPhase.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchPhoneByPhase.setText("Theo giai đoạn");
        rbSearchPhoneByPhase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchPhoneByPhaseActionPerformed(evt);
            }
        });

        comboSearchPhoneByPhase.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        comboSearchPhoneByPhase.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "EVT", "DVT", "PVT" }));

        btnSearchPhone.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearchPhone.setText("Tìm");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSearchPhoneByImei, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbSearchPhoneByName, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbSearchPhoneByPhase))
                .addGap(23, 23, 23)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtSearchPhoneByImei)
                    .addComponent(txtSearchPhoneByName)
                    .addComponent(comboSearchPhoneByPhase, 0, 256, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, Short.MAX_VALUE)
                .addComponent(btnSearchPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchPhoneByImei)
                    .addComponent(txtSearchPhoneByImei, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchPhoneByName)
                    .addComponent(txtSearchPhoneByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchPhone))
                .addGap(6, 6, 6)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchPhoneByPhase)
                    .addComponent(comboSearchPhoneByPhase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        tblPhone.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Số IMEI", "Tên Model", "Giai đoạn"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPhone);

        btnAddPhone.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddPhone.setText("Thêm điện thoại");
        btnAddPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPhoneActionPerformed(evt);
            }
        });

        btnEditPhone.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnEditPhone.setText("Sửa điện thoại");

        btnRemovePhone.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRemovePhone.setText("Xóa điện thoại");
        btnRemovePhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemovePhoneActionPerformed(evt);
            }
        });

        btnRefreshPhone.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRefreshPhone.setText("Làm mới");
        btnRefreshPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshPhoneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(btnRefreshPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEditPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemovePhone, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefreshPhone)
                    .addComponent(btnAddPhone)
                    .addComponent(btnEditPhone)
                    .addComponent(btnRemovePhone))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("QUẢN LÝ ĐIỆN THOẠI", jPanel1);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sắp xếp PC", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSortChipPcASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortChipPcASC.setText("Theo chip tăng dần");
        rbSortChipPcASC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortChipPcASCActionPerformed(evt);
            }
        });

        rbSortChipPcDESC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortChipPcDESC.setText("Theo chip giảm dần");
        rbSortChipPcDESC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortChipPcDESCActionPerformed(evt);
            }
        });

        rbSortRamPcASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortRamPcASC.setText("Theo RAM tăng dần");
        rbSortRamPcASC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortRamPcASCActionPerformed(evt);
            }
        });

        rbSortRamPcDESC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortRamPcDESC.setText("Theo RAM giảm dần");
        rbSortRamPcDESC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortRamPcDESCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSortChipPcASC)
                    .addComponent(rbSortChipPcDESC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSortRamPcASC)
                    .addComponent(rbSortRamPcDESC))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSortChipPcASC)
                    .addComponent(rbSortRamPcASC))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSortChipPcDESC)
                    .addComponent(rbSortRamPcDESC))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm PC", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSearchPcBySerial.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchPcBySerial.setText("Theo số serial");

        rbSearchPcByName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchPcByName.setText("Theo tên");
        rbSearchPcByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchPcByNameActionPerformed(evt);
            }
        });

        txtSearchPcBySerial.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtSearchPcBySerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchPcBySerialActionPerformed(evt);
            }
        });

        txtSearchPcByName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        rbSearchPcByRam.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchPcByRam.setText("Theo RAM");
        rbSearchPcByRam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchPcByRamActionPerformed(evt);
            }
        });

        btnSearchPc.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearchPc.setText("Tìm");
        btnSearchPc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchPcActionPerformed(evt);
            }
        });

        txtSearchPcByRam.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSearchPcByName, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbSearchPcByRam)
                    .addComponent(rbSearchPcBySerial))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSearchPcByName, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                    .addComponent(txtSearchPcBySerial)
                    .addComponent(txtSearchPcByRam))
                .addGap(18, 18, 18)
                .addComponent(btnSearchPc, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchPcBySerial)
                    .addComponent(txtSearchPcBySerial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchPc)
                    .addComponent(txtSearchPcByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbSearchPcByName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchPcByRam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbSearchPcByRam))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        tblPc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Số serial", "Tên PC", "CPU", "Dung lượng RAM", "Dung lượng ổ cứng", "Card đồ họa"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblPc);
        if (tblPc.getColumnModel().getColumnCount() > 0) {
            tblPc.getColumnModel().getColumn(4).setHeaderValue("Dung lượng ổ cứng");
            tblPc.getColumnModel().getColumn(5).setHeaderValue("Card đồ họa");
        }

        btnRefreshPc.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRefreshPc.setText("Làm mới");
        btnRefreshPc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshPcActionPerformed(evt);
            }
        });

        btnAddPc.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddPc.setText("Thêm PC");
        btnAddPc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPcActionPerformed(evt);
            }
        });

        btnEditPc.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnEditPc.setText("Sửa PC");

        btnRemovePc.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRemovePc.setText("Xóa PC");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(btnRefreshPc, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddPc, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEditPc, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemovePc, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefreshPc)
                    .addComponent(btnAddPc)
                    .addComponent(btnEditPc)
                    .addComponent(btnRemovePc))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("QUẢN LÝ PC", jPanel2);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sắp xếp Laptop", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSortChipLaptopASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortChipLaptopASC.setText("Theo chip tăng dần");
        rbSortChipLaptopASC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortChipLaptopASCActionPerformed(evt);
            }
        });

        rbSortChipLaptopDESC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortChipLaptopDESC.setText("Theo chip giảm dần");
        rbSortChipLaptopDESC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortChipLaptopDESCActionPerformed(evt);
            }
        });

        rbSortRamLaptopASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortRamLaptopASC.setText("Theo RAM tăng dần");
        rbSortRamLaptopASC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortRamLaptopASCActionPerformed(evt);
            }
        });

        rbSortRamLaptopDESC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortRamLaptopDESC.setText("Theo RAM giảm dần");
        rbSortRamLaptopDESC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortRamLaptopDESCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSortChipLaptopASC)
                    .addComponent(rbSortChipLaptopDESC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSortRamLaptopASC)
                    .addComponent(rbSortRamLaptopDESC))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSortChipLaptopASC)
                    .addComponent(rbSortRamLaptopASC))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSortChipLaptopDESC)
                    .addComponent(rbSortRamLaptopDESC))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm Laptop", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSearchLaptopBySerial.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchLaptopBySerial.setText("Theo số serial");

        rbSearchLaptopByName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchLaptopByName.setText("Theo tên");
        rbSearchLaptopByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchLaptopByNameActionPerformed(evt);
            }
        });

        txtSearchLaptopBySerial.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtSearchLaptopBySerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchLaptopBySerialActionPerformed(evt);
            }
        });

        txtSearchLaptopByName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        rbSearchLaptopByRam.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchLaptopByRam.setText("Theo RAM");
        rbSearchLaptopByRam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchLaptopByRamActionPerformed(evt);
            }
        });

        btnSearchLaptop.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearchLaptop.setText("Tìm");

        txtSearchLaptopByRam.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSearchLaptopByName, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbSearchLaptopByRam)
                    .addComponent(rbSearchLaptopBySerial))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSearchLaptopByName, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                    .addComponent(txtSearchLaptopBySerial)
                    .addComponent(txtSearchLaptopByRam))
                .addGap(18, 18, 18)
                .addComponent(btnSearchLaptop, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchLaptopBySerial)
                    .addComponent(txtSearchLaptopBySerial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchLaptop)
                    .addComponent(txtSearchLaptopByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbSearchLaptopByName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchLaptopByRam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbSearchLaptopByRam))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        tblLaptop.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Số serial", "Tên laptop", "CPU", "Dung lượng RAM", "Dung lượng ổ cứng", "Card đồ họa", "Màn hình"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblLaptop);

        btnRefreshLaptop.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRefreshLaptop.setText("Làm mới");
        btnRefreshLaptop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshLaptopActionPerformed(evt);
            }
        });

        btnAddLaptop.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddLaptop.setText("Thêm laptop");
        btnAddLaptop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddLaptopActionPerformed(evt);
            }
        });

        btnEditLaptop.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnEditLaptop.setText("Sửa laptop");

        btnRemoveLaptop.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRemoveLaptop.setText("Xóa laptop");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(btnRefreshLaptop, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddLaptop, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEditLaptop, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemoveLaptop, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefreshLaptop)
                    .addComponent(btnAddLaptop)
                    .addComponent(btnEditLaptop)
                    .addComponent(btnRemoveLaptop))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("QUẢN LÝ LAPTOP", jPanel3);

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sắp xếp màn hình", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSortNameMonitorASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortNameMonitorASC.setText("Theo tên từ a - z");
        rbSortNameMonitorASC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortNameMonitorASCActionPerformed(evt);
            }
        });

        rbSortNameMonitorDESC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortNameMonitorDESC.setText("Theo tên từ z - a");
        rbSortNameMonitorDESC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortNameMonitorDESCActionPerformed(evt);
            }
        });

        rbSortSizeMonitorASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortSizeMonitorASC.setText("Theo kích thước tăng dần");
        rbSortSizeMonitorASC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortSizeMonitorASCActionPerformed(evt);
            }
        });

        rbSortSizeMonitorDESC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortSizeMonitorDESC.setText("Theo kích thước giảm dần");
        rbSortSizeMonitorDESC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortSizeMonitorDESCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSortNameMonitorASC)
                    .addComponent(rbSortNameMonitorDESC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSortSizeMonitorASC)
                    .addComponent(rbSortSizeMonitorDESC))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSortNameMonitorASC)
                    .addComponent(rbSortSizeMonitorASC))
                .addGap(18, 18, 18)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSortNameMonitorDESC)
                    .addComponent(rbSortSizeMonitorDESC))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm màn hình", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSearchMonitorBySerial.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchMonitorBySerial.setText("Theo số serial");

        rbSearchMonitorByName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchMonitorByName.setText("Theo tên");
        rbSearchMonitorByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchMonitorByNameActionPerformed(evt);
            }
        });

        txtSearchMonitorBySerial.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtSearchMonitorBySerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchMonitorBySerialActionPerformed(evt);
            }
        });

        txtSearchMonitorByName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        rbSearchMonitorBySize.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchMonitorBySize.setText("Theo kích thước");
        rbSearchMonitorBySize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchMonitorBySizeActionPerformed(evt);
            }
        });

        btnSearchMonitor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearchMonitor.setText("Tìm");

        txtSearchMonitorBySize.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSearchMonitorByName, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbSearchMonitorBySize)
                    .addComponent(rbSearchMonitorBySerial))
                .addGap(18, 18, 18)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSearchMonitorByName, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                    .addComponent(txtSearchMonitorBySerial)
                    .addComponent(txtSearchMonitorBySize))
                .addGap(18, 18, 18)
                .addComponent(btnSearchMonitor, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchMonitorBySerial)
                    .addComponent(txtSearchMonitorBySerial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchMonitor)
                    .addComponent(txtSearchMonitorByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbSearchMonitorByName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchMonitorBySize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbSearchMonitorBySize))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        tblMonitor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Số serial", "Tên màn hình", "Kích thước", "Độ phân giải"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tblMonitor);

        btnRefreshMonitor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRefreshMonitor.setText("Làm mới");
        btnRefreshMonitor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshMonitorActionPerformed(evt);
            }
        });

        btnAddMonitor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddMonitor.setText("Thêm màn hình");
        btnAddMonitor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMonitorActionPerformed(evt);
            }
        });

        btnEditMonitor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnEditMonitor.setText("Sửa màn hình");
        btnEditMonitor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditMonitorActionPerformed(evt);
            }
        });

        btnRemoveMonitor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRemoveMonitor.setText("Xóa màn hình");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(btnRefreshMonitor, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddMonitor, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEditMonitor, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemoveMonitor, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefreshMonitor)
                    .addComponent(btnAddMonitor)
                    .addComponent(btnEditMonitor)
                    .addComponent(btnRemoveMonitor))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("QUẢN LÝ MÀN HÌNH", jPanel4);

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sắp xếp danh sách nhân viên", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSortEmployeeNameASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortEmployeeNameASC.setText("Theo tên a-z");
        rbSortEmployeeNameASC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortEmployeeNameASCActionPerformed(evt);
            }
        });

        rbSortEmployeeNameDESC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortEmployeeNameDESC.setText("Theo tên z-a");

        rbSortEmployeeIdASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortEmployeeIdASC.setText("Theo mã nhân viên tăng dần");
        rbSortEmployeeIdASC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortEmployeeIdASCActionPerformed(evt);
            }
        });

        rbSortEmployeeIdDESC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortEmployeeIdDESC.setText("Theo mã nhân viên giảm dần");
        rbSortEmployeeIdDESC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortEmployeeIdDESCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSortEmployeeNameASC)
                    .addComponent(rbSortEmployeeNameDESC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSortEmployeeIdASC)
                    .addComponent(rbSortEmployeeIdDESC))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSortEmployeeNameASC)
                    .addComponent(rbSortEmployeeIdASC))
                .addGap(18, 18, 18)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSortEmployeeNameDESC)
                    .addComponent(rbSortEmployeeIdDESC))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm sinh viên", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSearchEmployeeById.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchEmployeeById.setText("Theo mã nhân viên");

        rbSearchEmployeeByName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchEmployeeByName.setText("Theo tên");
        rbSearchEmployeeByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchEmployeeByNameActionPerformed(evt);
            }
        });

        txtSearchEmployeeById.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtSearchEmployeeById.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchEmployeeByIdActionPerformed(evt);
            }
        });

        txtSearchEmployeeByName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        rbSearchEmployeeByDept.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchEmployeeByDept.setText("Theo phòng ban");
        rbSearchEmployeeByDept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchEmployeeByDeptActionPerformed(evt);
            }
        });

        comboSearchEmployeeByDept.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        comboSearchEmployeeByDept.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hành chính", "Nhân sự", "Kế toán", "Quản lý dự án", "Phát triển sản phẩm", "Kiểm thử" }));

        btnSearchEmployee.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearchEmployee.setText("Tìm");

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSearchEmployeeByName, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbSearchEmployeeByDept)
                    .addComponent(rbSearchEmployeeById))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboSearchEmployeeByDept, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchEmployeeByName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchEmployeeById, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnSearchEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchEmployeeById)
                    .addComponent(txtSearchEmployeeById, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchEmployeeByName)
                    .addComponent(txtSearchEmployeeByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchEmployee))
                .addGap(6, 6, 6)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchEmployeeByDept)
                    .addComponent(comboSearchEmployeeByDept, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        tblEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã nhân viên", "Họ tên", "Ngày sinh", "Địa chỉ", "Số điện thoại", "Email", "Phòng ban"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tblEmployee);

        btnRefreshEmployee.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRefreshEmployee.setText("Làm mới");
        btnRefreshEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshEmployeeActionPerformed(evt);
            }
        });

        btnAddEmployee.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddEmployee.setText("Thêm nhân viên");
        btnAddEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEmployeeActionPerformed(evt);
            }
        });

        btnEditEmployee.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnEditEmployee.setText("Sửa nhân viên");

        btnRemoveEmployee.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRemoveEmployee.setText("Xóa nhân viên");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(btnRefreshEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEditEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemoveEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefreshEmployee)
                    .addComponent(btnAddEmployee)
                    .addComponent(btnEditEmployee)
                    .addComponent(btnRemoveEmployee))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("THÔNG TIN NHÂN VIÊN", jPanel5);

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sắp xếp danh sách mượn", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSortBorrowingEmployeeNameASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortBorrowingEmployeeNameASC.setText("Theo tên nhân viên a-z");
        rbSortBorrowingEmployeeNameASC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortBorrowingEmployeeNameASCActionPerformed(evt);
            }
        });

        rbSortBorrowingEmployeeNameDESC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortBorrowingEmployeeNameDESC.setText("Theo tên nhân viên z-a");

        rbSortBorrowingDateASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortBorrowingDateASC.setText("Theo thời gian mượn sớm - muộn");
        rbSortBorrowingDateASC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortBorrowingDateASCActionPerformed(evt);
            }
        });

        rbSortBorrowingDateDESC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortBorrowingDateDESC.setText("Theo thời gian mượn muộn - sớm");
        rbSortBorrowingDateDESC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortBorrowingDateDESCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSortBorrowingEmployeeNameASC)
                    .addComponent(rbSortBorrowingEmployeeNameDESC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSortBorrowingDateASC)
                    .addComponent(rbSortBorrowingDateDESC))
                .addGap(19, 19, 19))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSortBorrowingEmployeeNameASC)
                    .addComponent(rbSortBorrowingDateASC))
                .addGap(18, 18, 18)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSortBorrowingEmployeeNameDESC)
                    .addComponent(rbSortBorrowingDateDESC))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm danh sách mượn", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSearchBorrowingBySerial.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchBorrowingBySerial.setText("Theo IMEI/Serial");
        rbSearchBorrowingBySerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchBorrowingBySerialActionPerformed(evt);
            }
        });

        rbSearchBorrowingByEmployeeName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchBorrowingByEmployeeName.setText("Theo tên nhân viên");
        rbSearchBorrowingByEmployeeName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchBorrowingByEmployeeNameActionPerformed(evt);
            }
        });

        txtSearchBorrowingBySerial.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtSearchBorrowingBySerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchBorrowingBySerialActionPerformed(evt);
            }
        });

        txtSearchBorrowingByName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        rbSearchBorrowingByDate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchBorrowingByDate.setText("Theo thời gian");
        rbSearchBorrowingByDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchBorrowingByDateActionPerformed(evt);
            }
        });

        btnSearchBorrowing.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearchBorrowing.setText("Tìm");

        txtSearchBorrowingFrom.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtSearchBorrowingFrom.setToolTipText("dd/MM/yyyy");
        txtSearchBorrowingFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchBorrowingFromActionPerformed(evt);
            }
        });

        txtSearchBorrowingTo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtSearchBorrowingTo.setToolTipText("dd/MM/yyyy");
        txtSearchBorrowingTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchBorrowingToActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Từ ngày");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Đến ngày");

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSearchBorrowingByDate)
                    .addComponent(rbSearchBorrowingByEmployeeName)
                    .addComponent(rbSearchBorrowingBySerial))
                .addGap(22, 22, 22)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addComponent(txtSearchBorrowingBySerial, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSearchBorrowing, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel18Layout.createSequentialGroup()
                                .addComponent(txtSearchBorrowingByName, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(115, 115, 115))
                            .addGroup(jPanel18Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(txtSearchBorrowingFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(txtSearchBorrowingTo, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(29, 29, 29))
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rbSearchBorrowingBySerial)
                        .addComponent(txtSearchBorrowingBySerial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnSearchBorrowing))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchBorrowingByEmployeeName)
                    .addComponent(txtSearchBorrowingByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchBorrowingByDate)
                    .addComponent(txtSearchBorrowingFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchBorrowingTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        txtSearchBorrowingFrom.getAccessibleContext().setAccessibleName("");
        txtSearchBorrowingTo.getAccessibleContext().setAccessibleName("");

        tblBorrowing.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã nhân viên", "Tên nhân viên", "Phòng ban", "Số IMEI/Serial", "Tên thiết bị", "Thời gian mượn"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tblBorrowing);

        btnRefreshBorrowing.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRefreshBorrowing.setText("Làm mới");
        btnRefreshBorrowing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshBorrowingActionPerformed(evt);
            }
        });

        btnAddBorrowing.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddBorrowing.setText("Cho mượn");
        btnAddBorrowing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddBorrowingActionPerformed(evt);
            }
        });

        btnRemoveBorrowing.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRemoveBorrowing.setText("Trả thiết bị");
        btnRemoveBorrowing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveBorrowingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane6)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel6Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(btnRefreshBorrowing, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddBorrowing, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemoveBorrowing, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefreshBorrowing)
                    .addComponent(btnAddBorrowing)
                    .addComponent(btnRemoveBorrowing))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("QUẢN LÝ MƯỢN", jPanel6);

        jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sắp xếp danh sách trả", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        buttonGroupSortGiveBack.add(rbSortGiveBackNameASC);
        rbSortGiveBackNameASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortGiveBackNameASC.setText("Theo tên nhân viên a-z");
        rbSortGiveBackNameASC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortGiveBackNameASCActionPerformed(evt);
            }
        });

        buttonGroupSortGiveBack.add(rbSortGiveBackNameDESC);
        rbSortGiveBackNameDESC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortGiveBackNameDESC.setText("Theo tên nhân viên z-a");

        buttonGroupSortGiveBack.add(rbSortGiveBackDateASC);
        rbSortGiveBackDateASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortGiveBackDateASC.setText("Theo thời gian trả sớm - muộn");
        rbSortGiveBackDateASC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortGiveBackDateASCActionPerformed(evt);
            }
        });

        buttonGroupSortGiveBack.add(rbSortGiveBackDateDESC);
        rbSortGiveBackDateDESC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortGiveBackDateDESC.setText("Theo thời gian trả muộn - sớm");
        rbSortGiveBackDateDESC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortGiveBackDateDESCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSortGiveBackNameASC)
                    .addComponent(rbSortGiveBackNameDESC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSortGiveBackDateASC)
                    .addComponent(rbSortGiveBackDateDESC))
                .addGap(19, 19, 19))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSortGiveBackNameASC)
                    .addComponent(rbSortGiveBackDateASC))
                .addGap(18, 18, 18)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSortGiveBackNameDESC)
                    .addComponent(rbSortGiveBackDateDESC))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm danh sách trả", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        buttonGroupSearchGiveBack.add(rbSearchGiveBackBySerial);
        rbSearchGiveBackBySerial.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchGiveBackBySerial.setText("Theo IMEI/Serial");
        rbSearchGiveBackBySerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchGiveBackBySerialActionPerformed(evt);
            }
        });

        buttonGroupSearchGiveBack.add(rbSearchGiveBackByEmployeeName);
        rbSearchGiveBackByEmployeeName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchGiveBackByEmployeeName.setText("Theo tên nhân viên");
        rbSearchGiveBackByEmployeeName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchGiveBackByEmployeeNameActionPerformed(evt);
            }
        });

        txtSearchGiveBackBySerial.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtSearchGiveBackBySerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchGiveBackBySerialActionPerformed(evt);
            }
        });

        txtSearchGiveBackByEmployeeName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        buttonGroupSearchGiveBack.add(rbSearchGiveBackByDate);
        rbSearchGiveBackByDate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchGiveBackByDate.setText("Theo thời gian");
        rbSearchGiveBackByDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchGiveBackByDateActionPerformed(evt);
            }
        });

        btnSearchGiveBack.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearchGiveBack.setText("Tìm");

        txtSearchGiveBackFrom.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtSearchGiveBackFrom.setToolTipText("dd/MM/yyyy");
        txtSearchGiveBackFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchGiveBackFromActionPerformed(evt);
            }
        });

        txtSearchGiveBackTo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtSearchGiveBackTo.setToolTipText("dd/MM/yyyy");
        txtSearchGiveBackTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchGiveBackToActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Từ ngày");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Đến ngày");

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSearchGiveBackByDate)
                    .addComponent(rbSearchGiveBackByEmployeeName)
                    .addComponent(rbSearchGiveBackBySerial))
                .addGap(22, 42, Short.MAX_VALUE)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel21Layout.createSequentialGroup()
                        .addComponent(txtSearchGiveBackBySerial, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSearchGiveBack, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addComponent(txtSearchGiveBackByEmployeeName, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(115, 115, 115))
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(txtSearchGiveBackFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(txtSearchGiveBackTo, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSearchGiveBackBySerial)
                    .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSearchGiveBack)
                        .addComponent(txtSearchGiveBackBySerial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchGiveBackByEmployeeName)
                    .addComponent(txtSearchGiveBackByEmployeeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchGiveBackByDate)
                    .addComponent(txtSearchGiveBackFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchGiveBackTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        tblGiveBack.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã nhân viên", "Tên nhân viên", "Phòng ban", "Số IMEI/Serial", "Tên thiết bị", "Thời gian trả"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(tblGiveBack);

        btnRefreshGiveBack.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRefreshGiveBack.setText("Làm mới");
        btnRefreshGiveBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshGiveBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane7)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel19Layout.createSequentialGroup()
                        .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel19Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(btnRefreshGiveBack, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(btnRefreshGiveBack)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel20.getAccessibleContext().setAccessibleDescription("");

        jTabbedPane1.addTab("QUẢN LÝ TRẢ", jPanel19);
        jPanel19.getAccessibleContext().setAccessibleName("Sắp xếp danh sách trả");

        txtTotalBorrowing.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtTotalBorrowing.setText("0");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Danh sách nhân viên (click vào để xem lịch sử chi tiết):");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Số lượng nhân viên đã trả:");

        txtTotalGiveBack.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtTotalGiveBack.setText("0");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Số lượng nhân viên đang mượn:");

        jListEmployee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListEmployeeMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jListEmployeeMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jListEmployeeMousePressed(evt);
            }
        });
        jListEmployee.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jListEmployeeInputMethodTextChanged(evt);
            }
        });
        jScrollPane8.setViewportView(jListEmployee);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Lịch sử trả");

        txtTotalEm.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtTotalEm.setText("0");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Số lượng nhân viên");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("Lịch sử mượn");

        tblGiveBackHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã nhân viên", "Tên nhân viên", "Phòng ban", "Số IMEI/Serial", "Tên thiết bị", "Thời gian mượn"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane10.setViewportView(tblGiveBackHistory);

        tblBorrowingHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã nhân viên", "Tên nhân viên", "Phòng ban", "Số IMEI/Serial", "Tên thiết bị", "Thời gian mượn"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane11.setViewportView(tblBorrowingHistory);

        comboSearchEmployeeByDept1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        comboSearchEmployeeByDept1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hành chính", "Nhân sự", "Kế toán", "Quản lý dự án", "Phát triển sản phẩm", "Kiểm thử" }));

        comboSearchEmployeeStaticstic.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        comboSearchEmployeeStaticstic.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hành chính", "Nhân sự", "Kế toán", "Quản lý dự án", "Phát triển sản phẩm", "Kiểm thử" }));

        btnSearchEmployee1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearchEmployee1.setText("Tìm");
        btnSearchEmployee1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnSearchEmployee1MousePressed(evt);
            }
        });

        btnRefreshStaticstic.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRefreshStaticstic.setText("Làm mới");
        btnRefreshStaticstic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshStaticsticActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel23Layout.createSequentialGroup()
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane10)
                            .addComponent(jScrollPane11, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel23Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel23Layout.createSequentialGroup()
                        .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel23Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(txtTotalBorrowing, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(txtTotalGiveBack, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(txtTotalEm, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel23Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(comboSearchEmployeeStaticstic, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSearchEmployee1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnRefreshStaticstic)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 210, Short.MAX_VALUE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel23Layout.createSequentialGroup()
                    .addGap(383, 383, 383)
                    .addComponent(comboSearchEmployeeByDept1, 0, 294, Short.MAX_VALUE)
                    .addGap(383, 383, 383)))
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTotalBorrowing, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTotalGiveBack, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTotalEm, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel23Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboSearchEmployeeStaticstic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearchEmployee1)
                            .addComponent(btnRefreshStaticstic)))
                    .addGroup(jPanel23Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel23Layout.createSequentialGroup()
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE))
                    .addComponent(jScrollPane8))
                .addContainerGap())
            .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel23Layout.createSequentialGroup()
                    .addGap(273, 273, 273)
                    .addComponent(comboSearchEmployeeByDept1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(247, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("THỐNG KÊ NHÂN VIÊN", jPanel23);

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/turn-off-24px.png"))); // NOI18N
        jMenuItem1.setText("Thoát");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//Menu item thoát ứng dụng
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    /**
     * lam moi du lieu nhan vien
     *
     * @param evt
     */
    private void btnRefreshStaticsticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshStaticsticActionPerformed
        comboSearchEmployeeStaticstic.setSelectedIndex(0);

        employees.clear();
        employees.addAll(dataController.<Employee>readDataFromFile(DataController.EMPLOYEE_FILE));
        showEmployees();
        showEmployeeToList();
    }//GEN-LAST:event_btnRefreshStaticsticActionPerformed
    /**
     * tim nhan vien theo phong ban
     *
     * @param evt
     */
    private void btnSearchEmployee1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearchEmployee1MousePressed
        String item = String.valueOf(comboSearchEmployeeStaticstic.getSelectedItem()).toString();
        List<Employee> results = dataController.searchEmployeeByDept(employees, item);
        if (results.size() > 0) {
            DefaultListModel listModel = new DefaultListModel();
            Set<Employee> hash_Set = new HashSet<Employee>();

            // lấy danh sách nhân viên mượn
            for (Borrowing b : borrowings) {
                hash_Set.add(b.getEmployee());
            }
            // lấy danh sách nhân viên trả
            for (GiveBack g : giveBacks) {
                hash_Set.add(g.getEmployee());
            }
            // chuyển set sang array
            Object[] arr = hash_Set.toArray();
            // lưu toàn bộ nhân viên mượn và trả và một list
            List<Employee> ems = new ArrayList<>();
            for (int i = 0; i < arr.length; i++) {
                ems.add((Employee) arr[i]);
            }
            // tìm kiếm nhân viên có mượn thiết bị
            List<Employee> employeeList = new ArrayList<>();
            for (Employee e1 : ems) {
                for (Employee e2 : results) {
                    if (e1.getFullName().equals(e2.getFullName())) {
                        employeeList.add(e1);   // thêm vào list
                        listModel.addElement(e1.getFullName());
                    }
                }
            }

            // thêm dữ liệu và list
            employees.clear();
            employees.addAll(employeeList);
            jListEmployee.setModel(listModel);

            var msg = "Tìm thấy " + employees.size() + " kết quả";
            showDialogMessage(msg);
        } else {
            var msg = "Không tìm thấy kết quả nào";
            showDialogMessage(msg);

        }
    }//GEN-LAST:event_btnSearchEmployee1MousePressed

    private void jListEmployeeInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jListEmployeeInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jListEmployeeInputMethodTextChanged
    /**
     * su kien click trong jList lick vao ten nhan vien -> 2 bang muon va tra se
     * tu dong update du lieu
     *
     * @param evt
     */
    private void jListEmployeeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListEmployeeMousePressed
        if (jListEmployee.getSelectedIndex() != -1) {
            String fullName = jListEmployee.getSelectedValue();
            DefaultTableModel model = (DefaultTableModel) tblBorrowingHistory.getModel();

            model.setRowCount(0);
            /**
             * Update du lieu trong bang muon
             */
            for (Borrowing r : borrowings) {
                Object[] row = new Object[]{};
                if (r.getEmployee().getFullName().equals(fullName)) {
                    if (r.getPhone() != null) {
                        row = new Object[]{
                            r.getEmployee().getEmployeeId(), r.getEmployee().getFullName(),
                            r.getEmployee().getEmployeeDept(),
                            r.getPhone().getImei(), r.getPhone().getName(),
                            simpleDateFormat.format(r.getBorrowingDate())
                        };
                    }
                    if (r.getPc() != null) {
                        row = new Object[]{
                            r.getEmployee().getEmployeeId(), r.getEmployee().getFullName(),
                            r.getEmployee().getEmployeeDept(),
                            r.getPc().getSerial(), r.getPc().getName(),
                            simpleDateFormat.format(r.getBorrowingDate())
                        };
                    }
                    if (r.getLaptop() != null) {
                        row = new Object[]{
                            r.getEmployee().getEmployeeId(), r.getEmployee().getFullName(),
                            r.getEmployee().getEmployeeDept(),
                            r.getLaptop().getSerial(), r.getLaptop().getName(),
                            simpleDateFormat.format(r.getBorrowingDate())
                        };
                    }
                    if (r.getMonitor() != null) {
                        row = new Object[]{
                            r.getEmployee().getEmployeeId(), r.getEmployee().getFullName(),
                            r.getEmployee().getEmployeeDept(),
                            r.getMonitor().getSerial(), r.getMonitor().getName(),
                            simpleDateFormat.format(r.getBorrowingDate())
                        };
                    }

                    model.addRow(row); //thêm các thông số bên trên vào bảng
                }
            }
            /**
             * Update du lieu trong bang tra
             */
            DefaultTableModel tblGiveBackModel = (DefaultTableModel) tblGiveBackHistory.getModel();
            tblGiveBackModel.setRowCount(0);
            for (GiveBack g : giveBacks) {
                Object[] row = new Object[]{};
                if (g.getEmployee().getFullName().equals(fullName)) {
                    if (g.getPhone() != null) {
                        row = new Object[]{
                            g.getEmployee().getEmployeeId(), g.getEmployee().getFullName(),
                            g.getEmployee().getEmployeeDept(),
                            g.getPhone().getImei(), g.getPhone().getName(),
                            simpleDateFormat.format(g.getGiveBackDate())
                        };
                    }
                    if (g.getPc() != null) {
                        row = new Object[]{
                            g.getEmployee().getEmployeeId(), g.getEmployee().getFullName(),
                            g.getEmployee().getEmployeeDept(),
                            g.getPc().getSerial(), g.getPc().getName(),
                            simpleDateFormat.format(g.getGiveBackDate())
                        };
                    }
                    if (g.getLaptop() != null) {
                        row = new Object[]{
                            g.getEmployee().getEmployeeId(), g.getEmployee().getFullName(),
                            g.getEmployee().getEmployeeDept(),
                            g.getLaptop().getSerial(), g.getLaptop().getName(),
                            simpleDateFormat.format(g.getGiveBackDate())
                        };
                    }
                    if (g.getMonitor() != null) {
                        row = new Object[]{
                            g.getEmployee().getEmployeeId(), g.getEmployee().getFullName(),
                            g.getEmployee().getEmployeeDept(),
                            g.getMonitor().getSerial(), g.getMonitor().getName(),
                            simpleDateFormat.format(g.getGiveBackDate())
                        };
                    }

                    tblGiveBackModel.addRow(row); //thêm các thông số bên trên vào bảng
                }
            }
        }
    }//GEN-LAST:event_jListEmployeeMousePressed

    private void jListEmployeeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListEmployeeMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_jListEmployeeMouseExited

    private void jListEmployeeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListEmployeeMouseClicked
        ////        jListEmployee
        //        if(jListEmployee.getSelectedIndex() != -1){
        //            System.out.println(jListEmployee.getSelectedValue());
        //        }
    }//GEN-LAST:event_jListEmployeeMouseClicked

    private void btnRefreshGiveBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshGiveBackActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRefreshGiveBackActionPerformed

    private void txtSearchGiveBackToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchGiveBackToActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchGiveBackToActionPerformed

    private void txtSearchGiveBackFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchGiveBackFromActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchGiveBackFromActionPerformed

    private void rbSearchGiveBackByDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchGiveBackByDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchGiveBackByDateActionPerformed

    private void txtSearchGiveBackBySerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchGiveBackBySerialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchGiveBackBySerialActionPerformed

    private void rbSearchGiveBackByEmployeeNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchGiveBackByEmployeeNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchGiveBackByEmployeeNameActionPerformed

    private void rbSearchGiveBackBySerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchGiveBackBySerialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchGiveBackBySerialActionPerformed

    private void rbSortGiveBackDateDESCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortGiveBackDateDESCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortGiveBackDateDESCActionPerformed

    private void rbSortGiveBackDateASCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortGiveBackDateASCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortGiveBackDateASCActionPerformed

    private void rbSortGiveBackNameASCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortGiveBackNameASCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortGiveBackNameASCActionPerformed

    private void btnRemoveBorrowingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveBorrowingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRemoveBorrowingActionPerformed

    private void btnAddBorrowingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddBorrowingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddBorrowingActionPerformed

    private void btnRefreshBorrowingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshBorrowingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRefreshBorrowingActionPerformed

    private void txtSearchBorrowingToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchBorrowingToActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchBorrowingToActionPerformed

    private void txtSearchBorrowingFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchBorrowingFromActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchBorrowingFromActionPerformed

    private void rbSearchBorrowingByDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchBorrowingByDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchBorrowingByDateActionPerformed

    private void txtSearchBorrowingBySerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchBorrowingBySerialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchBorrowingBySerialActionPerformed

    private void rbSearchBorrowingByEmployeeNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchBorrowingByEmployeeNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchBorrowingByEmployeeNameActionPerformed

    private void rbSearchBorrowingBySerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchBorrowingBySerialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchBorrowingBySerialActionPerformed

    private void rbSortBorrowingDateDESCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortBorrowingDateDESCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortBorrowingDateDESCActionPerformed

    private void rbSortBorrowingDateASCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortBorrowingDateASCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortBorrowingDateASCActionPerformed

    private void rbSortBorrowingEmployeeNameASCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortBorrowingEmployeeNameASCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortBorrowingEmployeeNameASCActionPerformed

    private void btnAddEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEmployeeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddEmployeeActionPerformed

    private void btnRefreshEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshEmployeeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRefreshEmployeeActionPerformed

    private void rbSearchEmployeeByDeptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchEmployeeByDeptActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchEmployeeByDeptActionPerformed

    private void txtSearchEmployeeByIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchEmployeeByIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchEmployeeByIdActionPerformed

    private void rbSearchEmployeeByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchEmployeeByNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchEmployeeByNameActionPerformed

    private void rbSortEmployeeIdDESCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortEmployeeIdDESCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortEmployeeIdDESCActionPerformed

    private void rbSortEmployeeIdASCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortEmployeeIdASCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortEmployeeIdASCActionPerformed

    private void rbSortEmployeeNameASCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortEmployeeNameASCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortEmployeeNameASCActionPerformed

    private void btnEditMonitorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditMonitorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEditMonitorActionPerformed

    private void btnAddMonitorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMonitorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddMonitorActionPerformed

    private void btnRefreshMonitorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshMonitorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRefreshMonitorActionPerformed

    private void rbSearchMonitorBySizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchMonitorBySizeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchMonitorBySizeActionPerformed

    private void txtSearchMonitorBySerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchMonitorBySerialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchMonitorBySerialActionPerformed

    private void rbSearchMonitorByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchMonitorByNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchMonitorByNameActionPerformed

    private void rbSortSizeMonitorDESCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortSizeMonitorDESCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortSizeMonitorDESCActionPerformed

    private void rbSortSizeMonitorASCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortSizeMonitorASCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortSizeMonitorASCActionPerformed

    private void rbSortNameMonitorDESCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortNameMonitorDESCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortNameMonitorDESCActionPerformed

    private void rbSortNameMonitorASCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortNameMonitorASCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortNameMonitorASCActionPerformed

    private void btnAddLaptopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddLaptopActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddLaptopActionPerformed

    private void btnRefreshLaptopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshLaptopActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRefreshLaptopActionPerformed

    private void rbSearchLaptopByRamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchLaptopByRamActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchLaptopByRamActionPerformed

    private void txtSearchLaptopBySerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchLaptopBySerialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchLaptopBySerialActionPerformed

    private void rbSearchLaptopByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchLaptopByNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchLaptopByNameActionPerformed

    private void rbSortRamLaptopDESCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortRamLaptopDESCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortRamLaptopDESCActionPerformed

    private void rbSortRamLaptopASCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortRamLaptopASCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortRamLaptopASCActionPerformed

    private void rbSortChipLaptopDESCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortChipLaptopDESCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortChipLaptopDESCActionPerformed

    private void rbSortChipLaptopASCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortChipLaptopASCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortChipLaptopASCActionPerformed

    private void btnAddPcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPcActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddPcActionPerformed

    private void btnRefreshPcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshPcActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRefreshPcActionPerformed

    private void btnSearchPcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchPcActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSearchPcActionPerformed

    private void rbSearchPcByRamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchPcByRamActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchPcByRamActionPerformed

    private void txtSearchPcBySerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchPcBySerialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchPcBySerialActionPerformed

    private void rbSearchPcByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchPcByNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchPcByNameActionPerformed

    private void rbSortRamPcDESCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortRamPcDESCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortRamPcDESCActionPerformed

    private void rbSortRamPcASCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortRamPcASCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortRamPcASCActionPerformed

    private void rbSortChipPcDESCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortChipPcDESCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortChipPcDESCActionPerformed

    private void rbSortChipPcASCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortChipPcASCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortChipPcASCActionPerformed

    private void btnRefreshPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshPhoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRefreshPhoneActionPerformed

    private void btnRemovePhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemovePhoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRemovePhoneActionPerformed

    private void btnAddPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPhoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddPhoneActionPerformed

    private void rbSearchPhoneByPhaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchPhoneByPhaseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchPhoneByPhaseActionPerformed

    private void txtSearchPhoneByImeiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchPhoneByImeiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchPhoneByImeiActionPerformed

    private void rbSearchPhoneByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchPhoneByNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchPhoneByNameActionPerformed

    private void rbSortPhonePhaseDESCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortPhonePhaseDESCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortPhonePhaseDESCActionPerformed

    private void rbSortPhonePhaseASCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortPhonePhaseASCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortPhonePhaseASCActionPerformed

    private void rbSortPhoneNameASCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortPhoneNameASCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortPhoneNameASCActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeFrm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddBorrowing;
    private javax.swing.JButton btnAddEmployee;
    private javax.swing.JButton btnAddLaptop;
    private javax.swing.JButton btnAddMonitor;
    private javax.swing.JButton btnAddPc;
    private javax.swing.JButton btnAddPhone;
    private javax.swing.JButton btnEditEmployee;
    private javax.swing.JButton btnEditLaptop;
    private javax.swing.JButton btnEditMonitor;
    private javax.swing.JButton btnEditPc;
    private javax.swing.JButton btnEditPhone;
    private javax.swing.JButton btnRefreshBorrowing;
    private javax.swing.JButton btnRefreshEmployee;
    private javax.swing.JButton btnRefreshGiveBack;
    private javax.swing.JButton btnRefreshLaptop;
    private javax.swing.JButton btnRefreshMonitor;
    private javax.swing.JButton btnRefreshPc;
    private javax.swing.JButton btnRefreshPhone;
    private javax.swing.JButton btnRefreshStaticstic;
    private javax.swing.JButton btnRemoveBorrowing;
    private javax.swing.JButton btnRemoveEmployee;
    private javax.swing.JButton btnRemoveLaptop;
    private javax.swing.JButton btnRemoveMonitor;
    private javax.swing.JButton btnRemovePc;
    private javax.swing.JButton btnRemovePhone;
    private javax.swing.JButton btnSearchBorrowing;
    private javax.swing.JButton btnSearchEmployee;
    private javax.swing.JButton btnSearchEmployee1;
    private javax.swing.JButton btnSearchGiveBack;
    private javax.swing.JButton btnSearchLaptop;
    private javax.swing.JButton btnSearchMonitor;
    private javax.swing.JButton btnSearchPc;
    private javax.swing.JButton btnSearchPhone;
    private javax.swing.ButtonGroup buttonGroupSearchBorrowing;
    private javax.swing.ButtonGroup buttonGroupSearchEmployee;
    private javax.swing.ButtonGroup buttonGroupSearchGiveBack;
    private javax.swing.ButtonGroup buttonGroupSearchLaptop;
    private javax.swing.ButtonGroup buttonGroupSearchMonitor;
    private javax.swing.ButtonGroup buttonGroupSearchPc;
    private javax.swing.ButtonGroup buttonGroupSearchPhone;
    private javax.swing.ButtonGroup buttonGroupSortBorrowing;
    private javax.swing.ButtonGroup buttonGroupSortEmployee;
    private javax.swing.ButtonGroup buttonGroupSortGiveBack;
    private javax.swing.ButtonGroup buttonGroupSortLaptop;
    private javax.swing.ButtonGroup buttonGroupSortMonitor;
    private javax.swing.ButtonGroup buttonGroupSortPc;
    private javax.swing.ButtonGroup buttonGroupSortPhone;
    private javax.swing.JComboBox<String> comboSearchEmployeeByDept;
    private javax.swing.JComboBox<String> comboSearchEmployeeByDept1;
    private javax.swing.JComboBox<String> comboSearchEmployeeStaticstic;
    private javax.swing.JComboBox<String> comboSearchPhoneByPhase;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jListEmployee;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JRadioButton rbSearchBorrowingByDate;
    private javax.swing.JRadioButton rbSearchBorrowingByEmployeeName;
    private javax.swing.JRadioButton rbSearchBorrowingBySerial;
    private javax.swing.JRadioButton rbSearchEmployeeByDept;
    private javax.swing.JRadioButton rbSearchEmployeeById;
    private javax.swing.JRadioButton rbSearchEmployeeByName;
    private javax.swing.JRadioButton rbSearchGiveBackByDate;
    private javax.swing.JRadioButton rbSearchGiveBackByEmployeeName;
    private javax.swing.JRadioButton rbSearchGiveBackBySerial;
    private javax.swing.JRadioButton rbSearchLaptopByName;
    private javax.swing.JRadioButton rbSearchLaptopByRam;
    private javax.swing.JRadioButton rbSearchLaptopBySerial;
    private javax.swing.JRadioButton rbSearchMonitorByName;
    private javax.swing.JRadioButton rbSearchMonitorBySerial;
    private javax.swing.JRadioButton rbSearchMonitorBySize;
    private javax.swing.JRadioButton rbSearchPcByName;
    private javax.swing.JRadioButton rbSearchPcByRam;
    private javax.swing.JRadioButton rbSearchPcBySerial;
    private javax.swing.JRadioButton rbSearchPhoneByImei;
    private javax.swing.JRadioButton rbSearchPhoneByName;
    private javax.swing.JRadioButton rbSearchPhoneByPhase;
    private javax.swing.JRadioButton rbSortBorrowingDateASC;
    private javax.swing.JRadioButton rbSortBorrowingDateDESC;
    private javax.swing.JRadioButton rbSortBorrowingEmployeeNameASC;
    private javax.swing.JRadioButton rbSortBorrowingEmployeeNameDESC;
    private javax.swing.JRadioButton rbSortChipLaptopASC;
    private javax.swing.JRadioButton rbSortChipLaptopDESC;
    private javax.swing.JRadioButton rbSortChipPcASC;
    private javax.swing.JRadioButton rbSortChipPcDESC;
    private javax.swing.JRadioButton rbSortEmployeeIdASC;
    private javax.swing.JRadioButton rbSortEmployeeIdDESC;
    private javax.swing.JRadioButton rbSortEmployeeNameASC;
    private javax.swing.JRadioButton rbSortEmployeeNameDESC;
    private javax.swing.JRadioButton rbSortGiveBackDateASC;
    private javax.swing.JRadioButton rbSortGiveBackDateDESC;
    private javax.swing.JRadioButton rbSortGiveBackNameASC;
    private javax.swing.JRadioButton rbSortGiveBackNameDESC;
    private javax.swing.JRadioButton rbSortNameMonitorASC;
    private javax.swing.JRadioButton rbSortNameMonitorDESC;
    private javax.swing.JRadioButton rbSortPhoneNameASC;
    private javax.swing.JRadioButton rbSortPhoneNameDESC;
    private javax.swing.JRadioButton rbSortPhonePhaseASC;
    private javax.swing.JRadioButton rbSortPhonePhaseDESC;
    private javax.swing.JRadioButton rbSortRamLaptopASC;
    private javax.swing.JRadioButton rbSortRamLaptopDESC;
    private javax.swing.JRadioButton rbSortRamPcASC;
    private javax.swing.JRadioButton rbSortRamPcDESC;
    private javax.swing.JRadioButton rbSortSizeMonitorASC;
    private javax.swing.JRadioButton rbSortSizeMonitorDESC;
    private javax.swing.JTable tblBorrowing;
    private javax.swing.JTable tblBorrowingHistory;
    private javax.swing.JTable tblEmployee;
    private javax.swing.JTable tblGiveBack;
    private javax.swing.JTable tblGiveBackHistory;
    private javax.swing.JTable tblLaptop;
    private javax.swing.JTable tblMonitor;
    private javax.swing.JTable tblPc;
    private javax.swing.JTable tblPhone;
    private javax.swing.JTextField txtSearchBorrowingByName;
    private javax.swing.JTextField txtSearchBorrowingBySerial;
    private javax.swing.JTextField txtSearchBorrowingFrom;
    private javax.swing.JTextField txtSearchBorrowingTo;
    private javax.swing.JTextField txtSearchEmployeeById;
    private javax.swing.JTextField txtSearchEmployeeByName;
    private javax.swing.JTextField txtSearchGiveBackByEmployeeName;
    private javax.swing.JTextField txtSearchGiveBackBySerial;
    private javax.swing.JTextField txtSearchGiveBackFrom;
    private javax.swing.JTextField txtSearchGiveBackTo;
    private javax.swing.JTextField txtSearchLaptopByName;
    private javax.swing.JTextField txtSearchLaptopByRam;
    private javax.swing.JTextField txtSearchLaptopBySerial;
    private javax.swing.JTextField txtSearchMonitorByName;
    private javax.swing.JTextField txtSearchMonitorBySerial;
    private javax.swing.JTextField txtSearchMonitorBySize;
    private javax.swing.JTextField txtSearchPcByName;
    private javax.swing.JTextField txtSearchPcByRam;
    private javax.swing.JTextField txtSearchPcBySerial;
    private javax.swing.JTextField txtSearchPhoneByImei;
    private javax.swing.JTextField txtSearchPhoneByName;
    private javax.swing.JLabel txtTotalBorrowing;
    private javax.swing.JLabel txtTotalEm;
    private javax.swing.JLabel txtTotalGiveBack;
    // End of variables declaration//GEN-END:variables

    private void addButtonGroup() {
        buttonGroupSearchPhone.add(rbSearchPhoneByImei);
        buttonGroupSearchPhone.add(rbSearchPhoneByName);
        buttonGroupSearchPhone.add(rbSearchPhoneByPhase);

        buttonGroupSortPhone.add(rbSortPhoneNameASC);
        buttonGroupSortPhone.add(rbSortPhoneNameDESC);
        buttonGroupSortPhone.add(rbSortPhonePhaseASC);
        buttonGroupSortPhone.add(rbSortPhonePhaseDESC);

        buttonGroupSearchPc.add(rbSearchPcBySerial);
        buttonGroupSearchPc.add(rbSearchPcByName);
        buttonGroupSearchPc.add(rbSearchPcByRam);

        buttonGroupSortPc.add(rbSortChipPcASC);
        buttonGroupSortPc.add(rbSortChipPcDESC);
        buttonGroupSortPc.add(rbSortRamPcASC);
        buttonGroupSortPc.add(rbSortRamPcDESC);

        buttonGroupSearchLaptop.add(rbSearchLaptopBySerial);
        buttonGroupSearchLaptop.add(rbSearchLaptopByName);
        buttonGroupSearchLaptop.add(rbSearchLaptopByRam);

        buttonGroupSortLaptop.add(rbSortChipLaptopASC);
        buttonGroupSortLaptop.add(rbSortChipLaptopDESC);
        buttonGroupSortLaptop.add(rbSortRamLaptopASC);
        buttonGroupSortLaptop.add(rbSortRamLaptopDESC);

        buttonGroupSearchMonitor.add(rbSearchMonitorBySerial);
        buttonGroupSearchMonitor.add(rbSearchMonitorByName);
        buttonGroupSearchMonitor.add(rbSearchMonitorBySize);

        buttonGroupSortMonitor.add(rbSortNameMonitorASC);
        buttonGroupSortMonitor.add(rbSortNameMonitorDESC);
        buttonGroupSortMonitor.add(rbSortSizeMonitorASC);
        buttonGroupSortMonitor.add(rbSortSizeMonitorDESC);

        buttonGroupSearchEmployee.add(rbSearchEmployeeById);
        buttonGroupSearchEmployee.add(rbSearchEmployeeByName);
        buttonGroupSearchEmployee.add(rbSearchEmployeeByDept);

        buttonGroupSortEmployee.add(rbSortEmployeeNameASC);
        buttonGroupSortEmployee.add(rbSortEmployeeNameDESC);
        buttonGroupSortEmployee.add(rbSortEmployeeIdASC);
        buttonGroupSortEmployee.add(rbSortEmployeeIdDESC);

        buttonGroupSearchBorrowing.add(rbSearchBorrowingBySerial);
        buttonGroupSearchBorrowing.add(rbSearchBorrowingByEmployeeName);
        buttonGroupSearchBorrowing.add(rbSearchBorrowingByDate);

        buttonGroupSortBorrowing.add(rbSortBorrowingEmployeeNameASC);
        buttonGroupSortBorrowing.add(rbSortBorrowingEmployeeNameDESC);
        buttonGroupSortBorrowing.add(rbSortBorrowingDateASC);
        buttonGroupSortBorrowing.add(rbSortBorrowingDateDESC);

    }

    private void addActionListener() {
        //đăng ký sự kiện cho từng nút
        //tab quản lý điện thoại
        btnAddPhone.addActionListener(this);
        btnEditPhone.addActionListener(this);
        btnRefreshPhone.addActionListener(this);
        btnRemovePhone.addActionListener(this);
        btnSearchPhone.addActionListener(this);

        rbSearchPhoneByImei.addActionListener(this);
        rbSearchPhoneByName.addActionListener(this);
        rbSearchPhoneByPhase.addActionListener(this);

        rbSortPhoneNameASC.addActionListener(this);
        rbSortPhoneNameDESC.addActionListener(this);
        rbSortPhonePhaseASC.addActionListener(this);
        rbSortPhonePhaseDESC.addActionListener(this);

        //tab quản lý pc
        btnAddPc.addActionListener(this);
        btnEditPc.addActionListener(this);
        btnRefreshPc.addActionListener(this);
        btnRemovePc.addActionListener(this);
        btnSearchPc.addActionListener(this);

        rbSearchPcBySerial.addActionListener(this);
        rbSearchPcByName.addActionListener(this);
        rbSearchPcByRam.addActionListener(this);

        rbSortChipPcASC.addActionListener(this);
        rbSortChipPcDESC.addActionListener(this);
        rbSortRamPcASC.addActionListener(this);
        rbSortRamPcDESC.addActionListener(this);

        //tab quản lý laptop
        btnAddLaptop.addActionListener(this);
        btnEditLaptop.addActionListener(this);
        btnRefreshLaptop.addActionListener(this);
        btnRemoveLaptop.addActionListener(this);
        btnSearchLaptop.addActionListener(this);

        rbSearchLaptopBySerial.addActionListener(this);
        rbSearchLaptopByName.addActionListener(this);
        rbSearchLaptopByRam.addActionListener(this);

        rbSortChipLaptopASC.addActionListener(this);
        rbSortChipLaptopDESC.addActionListener(this);
        rbSortRamLaptopASC.addActionListener(this);
        rbSortRamLaptopDESC.addActionListener(this);

        //tab quản lý màn hình
        btnAddMonitor.addActionListener(this);
        btnEditMonitor.addActionListener(this);
        btnRefreshMonitor.addActionListener(this);
        btnRemoveMonitor.addActionListener(this);
        btnSearchMonitor.addActionListener(this);

        rbSearchMonitorBySerial.addActionListener(this);
        rbSearchMonitorByName.addActionListener(this);
        rbSearchMonitorBySize.addActionListener(this);

        rbSortNameMonitorASC.addActionListener(this);
        rbSortNameMonitorDESC.addActionListener(this);
        rbSortSizeMonitorASC.addActionListener(this);
        rbSortSizeMonitorDESC.addActionListener(this);

        //tab quản lý nhân viên
        btnAddEmployee.addActionListener(this);
        btnEditEmployee.addActionListener(this);
        btnRefreshEmployee.addActionListener(this);
        btnRemoveEmployee.addActionListener(this);
        btnSearchEmployee.addActionListener(this);

        rbSearchEmployeeById.addActionListener(this);
        rbSearchEmployeeByName.addActionListener(this);
        rbSearchEmployeeByDept.addActionListener(this);

        rbSortEmployeeNameASC.addActionListener(this);
        rbSortEmployeeNameDESC.addActionListener(this);
        rbSortEmployeeIdASC.addActionListener(this);
        rbSortEmployeeIdDESC.addActionListener(this);

        //tab quản lý mượn thiết bị
        btnAddBorrowing.addActionListener(this);
        btnRefreshBorrowing.addActionListener(this);
        btnRemoveBorrowing.addActionListener(this);
        btnSearchBorrowing.addActionListener(this);

        rbSearchBorrowingBySerial.addActionListener(this);
        rbSearchBorrowingByEmployeeName.addActionListener(this);
        rbSearchBorrowingByDate.addActionListener(this);

        rbSortBorrowingEmployeeNameASC.addActionListener(this);
        rbSortBorrowingEmployeeNameDESC.addActionListener(this);
        rbSortBorrowingDateASC.addActionListener(this);
        rbSortBorrowingDateDESC.addActionListener(this);

        //tab quản lý trả thiết bị
        btnRefreshGiveBack.addActionListener(this);
        btnSearchGiveBack.addActionListener(this);

        rbSearchGiveBackBySerial.addActionListener(this);
        rbSearchGiveBackByEmployeeName.addActionListener(this);
        rbSearchGiveBackByDate.addActionListener(this);

        rbSortGiveBackNameASC.addActionListener(this);
        rbSortGiveBackNameDESC.addActionListener(this);
        rbSortGiveBackDateASC.addActionListener(this);
        rbSortGiveBackDateDESC.addActionListener(this);

    }

    public boolean addPhoneCallback(Phone phone) {  //ở cái table sẽ gọi đến phương 
        //thức vào và truyền đến list phone nhận dược
        for (Phone p : phones) {
            if (p.getImei() == phone.getImei()) {
                var msg = "Số IMEI '" + phone.getImei() + "' đã được thêm vào trước đó!";
                showDialogMessage(msg);
                return false;
            }
        }
        phones.add(phone);
        showPhone(phone);
        saveData(DataController.PHONE);//lưu phone

        return true;
    }

    public boolean addPcCallback(Pc pc) {
        //ở cái table sẽ gọi đến phương 
        //thức vào và truyền đến list pc nhận được
        for (Pc p : pcs) {
            if (p.getSerial().equals(pc.getSerial())) {
                var msg = "Số Serial '" + pc.getSerial() + "' đã được thêm vào trước đó!";
                showDialogMessage(msg);
                return false;
            }
        }
        pcs.add(pc);
        showPc(pc);
        saveData(DataController.PC);//lưu pc
        return true;
    }

    public boolean addLaptopCallback(Laptop laptop) {
        //ở cái table sẽ gọi đến phương 
        //thức vào và truyền đến list laptop nhận được
        for (Laptop p : laptops) {
            if (p.getSerial().equals(laptop.getSerial())) {
                var msg = "Số Serial '" + laptop.getSerial() + "' đã được thêm vào trước đó!";
                showDialogMessage(msg);
                return false;
            }
        }
        laptops.add(laptop);
        showLaptop(laptop);
        saveData(DataController.LAPTOP);//lưu laptop
        return true;
    }

    public boolean addMonitorCallback(Monitor monitor) {
        //ở cái table sẽ gọi đến phương 
        //thức vào và truyền đến list màn hình nhận được
        for (Monitor p : monitors) {
            if (p.getSerial().equals(monitor.getSerial())) {
                var msg = "Số Serial '" + monitor.getSerial() + "' đã được thêm vào trước đó!";
                showDialogMessage(msg);
                return false;
            }
        }
        monitors.add(monitor);
        showMonitor(monitor);
        saveData(DataController.MONITOR);//lưu màn hình
        return true;
    }

    public boolean addEmployeeCallback(Employee employee) {
        //ở cái table sẽ gọi đến phương 
        //thức vào và truyền đến list nhân viên nhận được
        for (Employee p : employees) {
            if (p.getEmployeeId().equals(employee.getEmployeeId())) {
                var msg = "Số ID '" + employee.getEmployeeId() + "' đã được thêm vào trước đó!";
                showDialogMessage(msg);
                return false;
            }
        }
        employees.add(employee);
        showEmployee(employee);
        saveData(DataController.EMPLOYEE);//lưu màn hình
        return true;
    }

    public void addBorrowingCallback(Borrowing borrowing) {
        //ở cái table sẽ gọi đến phương 
        //thức vào và truyền đến list nhân viên nhận được
        borrowings.add(borrowing);
        showBorrowing(borrowing);
        saveData(DataController.BORROWING);//lưu danh sách mượn
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        //thực hiện các hành động
        var obj = e.getSource();
        if (obj.equals(btnAddPhone)) {
            AddPhoneDialog addPhoneDialog
                    = new AddPhoneDialog(this, rootPaneCheckingEnabled);
            addPhoneDialog.setVisible(true);
        } else if (obj.equals(btnRemovePhone)) {
            removePhone();
        } else if (obj.equals(btnEditPhone)) {
            editPhone();
        } else if (obj.equals(rbSortPhoneNameASC)
                || obj.equals(rbSortPhoneNameDESC)
                || obj.equals(rbSortPhonePhaseASC)
                || obj.equals(rbSortPhonePhaseDESC)) {
            sortPhones(obj);
        } else if (obj.equals(btnSearchPhone)) {
            searchPhones();
        } else if (obj.equals(btnRefreshPhone)) {
            refreshPhones();
        } else if (obj.equals(btnAddPc)) {
            AddPcDialog addPcDialog
                    = new AddPcDialog(this, rootPaneCheckingEnabled);
            addPcDialog.setVisible(true);
        } else if (obj.equals(btnRemovePc)) {
            removePc();
        } else if (obj.equals(btnEditPc)) {
            editPc();
        } else if (obj.equals(rbSortChipPcASC)
                || obj.equals(rbSortChipPcDESC)
                || obj.equals(rbSortRamPcASC)
                || obj.equals(rbSortRamPcDESC)) {
            sortPcs(obj);
        } else if (obj.equals(btnSearchPc)) {
            searchPcs();
        } else if (obj.equals(btnRefreshPc)) {
            refreshPcs();
        } else if (obj.equals(btnAddLaptop)) {
            AddLaptopDialog addLaptopDialog
                    = new AddLaptopDialog(this, rootPaneCheckingEnabled);
            addLaptopDialog.setVisible(true);
        } else if (obj.equals(btnRemoveLaptop)) {
            removeLaptop();
        } else if (obj.equals(btnEditLaptop)) {
            editLaptop();
        } else if (obj.equals(rbSortChipLaptopASC)
                || obj.equals(rbSortChipLaptopDESC)
                || obj.equals(rbSortRamLaptopASC)
                || obj.equals(rbSortRamLaptopDESC)) {
            sortLaptops(obj);
        } else if (obj.equals(btnSearchLaptop)) {
            searchLaptops();
        } else if (obj.equals(btnRefreshLaptop)) {
            refreshLaptops();
        } else if (obj.equals(btnAddMonitor)) {
            AddMonitorDialog addMonitorDialog
                    = new AddMonitorDialog(this, rootPaneCheckingEnabled);
            addMonitorDialog.setVisible(true);
        } else if (obj.equals(btnRemoveMonitor)) {
            removeMonitor();
        } else if (obj.equals(btnEditMonitor)) {
            editMonitor();
        } else if (obj.equals(rbSortNameMonitorASC)
                || obj.equals(rbSortNameMonitorDESC)
                || obj.equals(rbSortSizeMonitorASC)
                || obj.equals(rbSortSizeMonitorDESC)) {
            sortMonitors(obj);
        } else if (obj.equals(btnSearchMonitor)) {
            searchMonitors();
        } else if (obj.equals(btnRefreshMonitor)) {
            refreshMonitors();
        } else if (obj.equals(btnAddEmployee)) {
            AddEmployeeDialog addEmployeeDialog
                    = new AddEmployeeDialog(this, rootPaneCheckingEnabled);
            addEmployeeDialog.setVisible(true);
        } else if (obj.equals(btnRemoveEmployee)) {
            removeEmployee();
        } else if (obj.equals(btnEditEmployee)) {
            editEmployee();
        } else if (obj.equals(rbSortEmployeeNameASC)
                || obj.equals(rbSortEmployeeNameDESC)
                || obj.equals(rbSortEmployeeIdASC)
                || obj.equals(rbSortEmployeeIdDESC)) {
            sortEmployees(obj);
        } else if (obj.equals(btnSearchEmployee)) {
            searchEmployees();
        } else if (obj.equals(btnRefreshEmployee)) {
            refreshEmployees();
        } else if (obj.equals(btnAddBorrowing)) {
            addBorrowing();
        } else if (obj.equals(rbSortBorrowingEmployeeNameASC)
                || obj.equals(rbSortBorrowingEmployeeNameDESC)
                || obj.equals(rbSortBorrowingDateASC)
                || obj.equals(rbSortBorrowingDateDESC)) {
            sortBorrowings(obj);
        } else if (obj.equals(btnSearchBorrowing)) {
            searchBorrowings();
        } else if (obj.equals(btnRefreshBorrowing)) {
            refreshBorrowings();
        } else if (obj.equals(btnRemoveBorrowing)) {
            removeBorrowing();
        } else if (obj.equals(rbSortGiveBackNameASC)
                || obj.equals(rbSortGiveBackNameDESC)
                || obj.equals(rbSortGiveBackDateASC)
                || obj.equals(rbSortGiveBackDateDESC)) {
            sortGiveBacks(obj);
        } else if (obj.equals(btnSearchGiveBack)) {
            searchGiveBacks();
        } else if (obj.equals(btnRefreshGiveBack)) {
            refreshGiveBacks();
        }
    }

    //pt hiển thị thông tin ra bảng
    private void showPhone(Phone phone) {
        Object[] row = new Object[]{
            phone.getImei(), phone.getName(), phone.getPhase()
        };
        tableModelPhone.addRow(row); //thêm các thông số bên trên vào bảng
    }

    private void showPc(Pc pc) {
        Object[] row = new Object[]{
            pc.getSerial(), pc.getName(), pc.getCpu(),
            pc.getRam(), pc.getDisk(), pc.getVga()
        };
        tableModelPc.addRow(row); //thêm các thông số bên trên vào bảng
    }

    private void showLaptop(Laptop laptop) {
        Object[] row = new Object[]{
            laptop.getSerial(), laptop.getName(), laptop.getCpu(),
            laptop.getRam(), laptop.getDisk(), laptop.getVga(), laptop.getSize()
        };
        tableModelLaptop.addRow(row); //thêm các thông số bên trên vào bảng
    }

    private void showMonitor(Monitor monitor) {
        Object[] row = new Object[]{
            monitor.getSerial(), monitor.getName(), monitor.getSize(),
            monitor.getResolution()
        };
        tableModelMonitor.addRow(row); //thêm các thông số bên trên vào bảng
    }

    private void showEmployee(Employee employee) {
        Object[] row = new Object[]{
            employee.getEmployeeId(), employee.getFullName(), employee.getDob(),
            employee.getAddress(), employee.getPhoneNumber(),
            employee.getEmployeeEmail(), employee.getEmployeeDept()
        };
        tableModelEmployee.addRow(row); //thêm các thông số bên trên vào bảng
    }

    private void showBorrowing(Borrowing r) { //hiển thị thông tin lên bảng
        Object[] row = new Object[]{};
        if (r.getPhone() != null) {
            row = new Object[]{
                r.getEmployee().getEmployeeId(), r.getEmployee().getFullName(),
                r.getEmployee().getEmployeeDept(),
                r.getPhone().getImei(), r.getPhone().getName(),
                simpleDateFormat.format(r.getBorrowingDate())
            };
        }
        if (r.getPc() != null) {
            row = new Object[]{
                r.getEmployee().getEmployeeId(), r.getEmployee().getFullName(),
                r.getEmployee().getEmployeeDept(),
                r.getPc().getSerial(), r.getPc().getName(),
                simpleDateFormat.format(r.getBorrowingDate())
            };
        }
        if (r.getLaptop() != null) {
            row = new Object[]{
                r.getEmployee().getEmployeeId(), r.getEmployee().getFullName(),
                r.getEmployee().getEmployeeDept(),
                r.getLaptop().getSerial(), r.getLaptop().getName(),
                simpleDateFormat.format(r.getBorrowingDate())
            };
        }
        if (r.getMonitor() != null) {
            row = new Object[]{
                r.getEmployee().getEmployeeId(), r.getEmployee().getFullName(),
                r.getEmployee().getEmployeeDept(),
                r.getMonitor().getSerial(), r.getMonitor().getName(),
                simpleDateFormat.format(r.getBorrowingDate())
            };
        }
        tableModelBorrowing.addRow(row); //thêm các thông số bên trên vào bảng
    }

    private void showGiveBack(GiveBack g) { //hiển thị thông tin lên bảng
        Object[] row = new Object[]{};
        // thêm điện thoại vào bảng danh sách trả
        if (g.getPhone() != null) {
            row = new Object[]{
                g.getEmployee().getEmployeeId(), g.getEmployee().getFullName(),
                g.getEmployee().getEmployeeDept(),
                g.getPhone().getImei(), g.getPhone().getName(),
                simpleDateFormat.format(g.getGiveBackDate())
            };
        }
        // thêm pc vào bảng danh sách trả
        if (g.getPc() != null) {
            row = new Object[]{
                g.getEmployee().getEmployeeId(), g.getEmployee().getFullName(),
                g.getEmployee().getEmployeeDept(),
                g.getPc().getSerial(), g.getPc().getName(),
                simpleDateFormat.format(g.getGiveBackDate())
            };
        }
        // thêm laptop vào bảng danh sách trả
        if (g.getLaptop() != null) {
            row = new Object[]{
                g.getEmployee().getEmployeeId(), g.getEmployee().getFullName(),
                g.getEmployee().getEmployeeDept(),
                g.getLaptop().getSerial(), g.getLaptop().getName(),
                simpleDateFormat.format(g.getGiveBackDate())
            };
        }
        // thêm monitor vào bảng danh sách trả
        if (g.getMonitor() != null) {
            row = new Object[]{
                g.getEmployee().getEmployeeId(), g.getEmployee().getFullName(),
                g.getEmployee().getEmployeeDept(),
                g.getMonitor().getSerial(), g.getMonitor().getName(),
                simpleDateFormat.format(g.getGiveBackDate())
            };
        }
        tableModelGiveBack.addRow(row); //thêm các thông số bên trên vào bảng
    }

    private void LoadData() {
        //đọc danh sách các điện thoại
        phones = dataController.<Phone>readDataFromFile(DataController.PHONE_FILE);
        //đọc danh sách các PC
        pcs = dataController.<Pc>readDataFromFile(DataController.PC_FILE);
        //đọc danh sách các laptop
        laptops = dataController.<Laptop>readDataFromFile(DataController.LAPTOP_FILE);
        //đọc danh sách các màn hình
        monitors = dataController.<Monitor>readDataFromFile(DataController.MONITOR_FILE);
        //đọc danh sách các màn hình
        employees = dataController.<Employee>readDataFromFile(DataController.EMPLOYEE_FILE);
        //đọc danh sách các màn hình
        borrowings = dataController.<Borrowing>readDataFromFile(DataController.BORROWING_FILE);
        //đọc danh sách trả
        giveBacks = dataController.<GiveBack>readDataFromFile(DataController.GIVE_BACK_FILE);
        txtTotalBorrowing.setText(String.valueOf(borrowings.size()));
        txtTotalGiveBack.setText(String.valueOf(giveBacks.size()));
    }

    private void ShowData() {
        showPhones();
        showPcs();
        showLaptops();
        showMonitors();
        showEmployees();
        showBorrowings();
        showGiveBacks();
        showEmployeeToList(); // hien thi danh sach nhan vien vao jlist
    }

    /**
     * Load du lieu nhan vien len jList check nhan vien trung bang set
     *
     */
    private void showEmployeeToList() {
        DefaultListModel listModel = new DefaultListModel();
        Set<String> hash_Set = new HashSet<String>();
        for (Borrowing b : borrowings) {
//            listModel.addElement(b.getEmployee().getFullName());
            hash_Set.add(b.getEmployee().getFullName());
        }
        for (GiveBack g : giveBacks) {

//            listModel.addElement(g.getEmployee().getFullName());
            hash_Set.add(g.getEmployee().getFullName());
        }
        Object[] arr = hash_Set.toArray();
        for (int i = 0; i < arr.length; i++) {
            listModel.addElement(arr[i]);

        }

        jListEmployee.setModel(listModel);
        /**
         * set total size for employee and display on Statistic
         */
        txtTotalEm.setText(String.valueOf(employees.size()));
    }

    private void showPhones() {
        tableModelPhone.setRowCount(0); //xóa hết dữ liệu cũ rồi mới hiển thị lại
        for (Phone phone : phones) {
            showPhone(phone);
        }
    }

    private void showPcs() {
        tableModelPc.setRowCount(0); //xóa hết dữ liệu cũ rồi mới hiển thị lại
        for (Pc pc : pcs) {
            showPc(pc);
        }
    }

    private void showLaptops() {
        tableModelLaptop.setRowCount(0); //xóa hết dữ liệu cũ rồi mới hiển thị lại
        for (Laptop laptop : laptops) {
            showLaptop(laptop);
        }
    }

    private void showMonitors() {
        tableModelMonitor.setRowCount(0); //xóa hết dữ liệu cũ rồi mới hiển thị lại
        for (Monitor monitor : monitors) {
            showMonitor(monitor);
        }
    }

    private void showEmployees() {
        tableModelEmployee.setRowCount(0); //xóa hết dữ liệu cũ rồi mới hiển thị lại
        for (Employee employee : employees) {
            showEmployee(employee);
        }
    }

    private void showBorrowings() {
        tableModelBorrowing.setRowCount(0); //xóa hết dữ liệu cũ rồi mới hiển thị lại
        for (Borrowing r : borrowings) {
            showBorrowing(r);
        }
    }

    private void showGiveBacks() {
        tableModelGiveBack.setRowCount(0); //xóa hết dữ liệu cũ rồi mới hiển thị lại
        for (GiveBack g : giveBacks) {
            showGiveBack(g);
        }
    }

    private void saveData(int choice) {
        switch (choice) {
            case DataController.PHONE:
                dataController.<Phone>writeToFile(phones,
                        DataController.PHONE_FILE);
                break;
            case DataController.PC:
                dataController.<Pc>writeToFile(pcs,
                        DataController.PC_FILE);
                break;
            case DataController.LAPTOP:
                dataController.<Laptop>writeToFile(laptops,
                        DataController.LAPTOP_FILE);
                break;
            case DataController.MONITOR:
                dataController.<Monitor>writeToFile(monitors,
                        DataController.MONITOR_FILE);
                break;
            case DataController.EMPLOYEE:
                dataController.<Employee>writeToFile(employees,
                        DataController.EMPLOYEE_FILE);
                break;
            case DataController.BORROWING:
                dataController.<Borrowing>writeToFile(borrowings,
                        DataController.BORROWING_FILE);
                break;
            case DataController.GIVE_BACK:
                dataController.<GiveBack>writeToFile(giveBacks,
                        DataController.GIVE_BACK_FILE);
                break;
        }
    }

    private void removePhone() {
        int selectedIndex = tblPhone.getSelectedRow();//chọn dòng cần xóa
        //chỉ số dòng trong bảng chính là chỉ số dòng trong danh sách
        if (selectedIndex > -1) {
            var msg = "Bạn có chắc chắn muốn xóa bản ghi này không?";
            int confirm = JOptionPane.showConfirmDialog(rootPane, msg);
            if (confirm == JOptionPane.OK_OPTION) {
                phones.remove(selectedIndex); //xóa khỏi danh sách
                tableModelPhone.removeRow(selectedIndex); //xóa khỏi bảng
                dataController.<Phone>writeToFile(phones,
                        DataController.PHONE_FILE);
            }
        } else {
            var msg = "Vui lòng chọn 1 bản ghi để xóa!";
            showDialogMessage(msg);
        }
    }

    private void removePc() {
        int selectedIndex = tblPc.getSelectedRow();//chọn dòng cần xóa
        //chỉ số dòng trong bảng chính là chỉ số dòng trong danh sách
        if (selectedIndex > -1) {
            var msg = "Bạn có chắc chắn muốn xóa bản ghi này không?";
            int confirm = JOptionPane.showConfirmDialog(rootPane, msg);
            if (confirm == JOptionPane.OK_OPTION) {
                pcs.remove(selectedIndex); //xóa khỏi danh sách
                tableModelPc.removeRow(selectedIndex); //xóa khỏi bảng
                dataController.<Pc>writeToFile(pcs,
                        DataController.PC_FILE);
            }
        } else {
            var msg = "Vui lòng chọn 1 bản ghi để xóa!";
            showDialogMessage(msg);
        }
    }

    private void removeLaptop() {
        int selectedIndex = tblLaptop.getSelectedRow();//chọn dòng cần xóa
        //chỉ số dòng trong bảng chính là chỉ số dòng trong danh sách
        if (selectedIndex > -1) {
            var msg = "Bạn có chắc chắn muốn xóa bản ghi này không?";
            int confirm = JOptionPane.showConfirmDialog(rootPane, msg);
            if (confirm == JOptionPane.OK_OPTION) {
                laptops.remove(selectedIndex); //xóa khỏi danh sách
                tableModelLaptop.removeRow(selectedIndex); //xóa khỏi bảng
                dataController.<Laptop>writeToFile(laptops,
                        DataController.LAPTOP_FILE);
            }
        } else {
            var msg = "Vui lòng chọn 1 bản ghi để xóa!";
            showDialogMessage(msg);
        }
    }

    private void removeMonitor() {
        int selectedIndex = tblMonitor.getSelectedRow();//chọn dòng cần xóa
        //chỉ số dòng trong bảng chính là chỉ số dòng trong danh sách
        if (selectedIndex > -1) {
            var msg = "Bạn có chắc chắn muốn xóa bản ghi này không?";
            int confirm = JOptionPane.showConfirmDialog(rootPane, msg);
            if (confirm == JOptionPane.OK_OPTION) {
                monitors.remove(selectedIndex); //xóa khỏi danh sách
                tableModelMonitor.removeRow(selectedIndex); //xóa khỏi bảng
                dataController.<Monitor>writeToFile(monitors,
                        DataController.MONITOR_FILE);
            }
        } else {
            var msg = "Vui lòng chọn 1 bản ghi để xóa!";
            showDialogMessage(msg);
        }
    }

    private void removeEmployee() {
        int selectedIndex = tblEmployee.getSelectedRow();//chọn dòng cần xóa
        //chỉ số dòng trong bảng chính là chỉ số dòng trong danh sách
        if (selectedIndex > -1) {
            var msg = "Bạn có chắc chắn muốn xóa bản ghi này không?";
            int confirm = JOptionPane.showConfirmDialog(rootPane, msg);
            if (confirm == JOptionPane.OK_OPTION) {
                employees.remove(selectedIndex); //xóa khỏi danh sách
                tableModelEmployee.removeRow(selectedIndex); //xóa khỏi bảng
                dataController.<Employee>writeToFile(employees,
                        DataController.EMPLOYEE_FILE);
            }
        } else {
            var msg = "Vui lòng chọn 1 bản ghi để xóa!";
            showDialogMessage(msg);
        }
    }

    // thêm vào danh sách trả thiết bị
    private void addNewGiveBack(Borrowing r) {
        var currentTime = new Date();
        var format = "dd/MM/yyyy HH:mm:ss";
        var dateFormat = new SimpleDateFormat(format);
        // thêm mới một record vào danh sách trả
        GiveBack g = new GiveBack(
                r.getEmployee(), r.getPhone(), r.getPc(), r.getLaptop(), r.getMonitor(), currentTime
        );
        giveBacks.add(g);
        showGiveBack(g);
        saveData(DataController.GIVE_BACK);//lưu phone
        txtTotalGiveBack.setText(String.valueOf(giveBacks.size()));

    }

    // xóa mượn (trả thiết bị)
    private void removeBorrowing() {
        int selectedIndex = tblBorrowing.getSelectedRow();//chọn dòng cần xóa
        //chỉ số dòng trong bảng chính là chỉ số dòng trong danh sách
        if (selectedIndex > -1) {
            var msg = "Bạn có chắc chắn muốn trả thiết bị này không?";
            int confirm = JOptionPane.showConfirmDialog(rootPane, msg);
            if (confirm == JOptionPane.OK_OPTION) {
                // thêm vào danh sách trả
                Borrowing r = borrowings.get(selectedIndex);
                addNewGiveBack(r);

                borrowings.remove(selectedIndex); //xóa khỏi danh sách
                tableModelBorrowing.removeRow(selectedIndex); //xóa khỏi bảng
                dataController.<Borrowing>writeToFile(borrowings, DataController.BORROWING_FILE);
                txtTotalBorrowing.setText(String.valueOf(borrowings.size()));
            }
        } else {
            var msg = "Vui lòng chọn 1 bản ghi để xóa!";
            showDialogMessage(msg);
        }
    }

    private void showDialogMessage(String msg) {
        JOptionPane.showMessageDialog(rootPane, msg);
    }

    private void editPhone() {
        int selectedIndex = tblPhone.getSelectedRow();//chọn dòng cần edit
        //chỉ số dòng trong bảng chính là chỉ số dòng trong danh sách
        if (selectedIndex > -1) {
            Phone phone = phones.get(selectedIndex);
            EditPhoneDialog editPhoneDialog
                    = new EditPhoneDialog(this, rootPaneCheckingEnabled, phone);
            editPhoneDialog.setVisible(true);

        } else {
            var msg = "Vui lòng chọn 1 bản ghi để sửa!";
            showDialogMessage(msg);
        }
    }

    private void editPc() {
        int selectedIndex = tblPc.getSelectedRow();//chọn dòng cần edit
        //chỉ số dòng trong bảng chính là chỉ số dòng trong danh sách
        if (selectedIndex > -1) {
            Pc pc = pcs.get(selectedIndex);
            EditPcDialog editPcDialog
                    = new EditPcDialog(this, rootPaneCheckingEnabled, pc);
            editPcDialog.setVisible(true);

        } else {
            var msg = "Vui lòng chọn 1 bản ghi để sửa!";
            showDialogMessage(msg);
        }
    }

    private void editLaptop() {
        int selectedIndex = tblLaptop.getSelectedRow();//chọn dòng cần edit
        //chỉ số dòng trong bảng chính là chỉ số dòng trong danh sách
        if (selectedIndex > -1) {
            Laptop laptop = laptops.get(selectedIndex);
            EditLaptopDialog editLaptopDialog
                    = new EditLaptopDialog(this, rootPaneCheckingEnabled, laptop);
            editLaptopDialog.setVisible(true);

        } else {
            var msg = "Vui lòng chọn 1 bản ghi để sửa!";
            showDialogMessage(msg);
        }
    }

    private void editMonitor() {
        int selectedIndex = tblMonitor.getSelectedRow();//chọn dòng cần edit
        //chỉ số dòng trong bảng chính là chỉ số dòng trong danh sách
        if (selectedIndex > -1) {
            Monitor monitor = monitors.get(selectedIndex);
            EditMonitorDialog editMonitorDialog
                    = new EditMonitorDialog(this, rootPaneCheckingEnabled, monitor);
            editMonitorDialog.setVisible(true);

        } else {
            var msg = "Vui lòng chọn 1 bản ghi để sửa!";
            showDialogMessage(msg);
        }
    }

    private void editEmployee() {
        int selectedIndex = tblEmployee.getSelectedRow();//chọn dòng cần edit
        //chỉ số dòng trong bảng chính là chỉ số dòng trong danh sách
        if (selectedIndex > -1) {
            Employee employee = employees.get(selectedIndex);
            EditEmployeeDialog editEmployeeDialog
                    = new EditEmployeeDialog(this, rootPaneCheckingEnabled, employee);
            editEmployeeDialog.setVisible(true);

        } else {
            var msg = "Vui lòng chọn 1 bản ghi để sửa!";
            showDialogMessage(msg);
        }
    }

    public void editPhoneCallback(Phone phone) {
        int selectedIndex = tblPhone.getSelectedRow();
        phones.set(selectedIndex, phone);
        tableModelPhone.removeRow(selectedIndex);//xóa dòng tại vị trí đã chọn
        Object[] row = new Object[]{
            phone.getImei(), phone.getName(), phone.getPhase()
        };
        tableModelPhone.insertRow(selectedIndex, row);//chèn dòng sau khi đã sửa
        saveData(DataController.PHONE);//lưu dữ liệu vào file PHONE
    }

    public void editPcCallback(Pc pc) {
        int selectedIndex = tblPc.getSelectedRow();
        pcs.set(selectedIndex, pc);
        tableModelPc.removeRow(selectedIndex);//xóa dòng tại vị trí đã chọn
        Object[] row = new Object[]{
            pc.getSerial(), pc.getName(), pc.getCpu(),
            pc.getRam(), pc.getDisk(), pc.getVga()
        };
        tableModelPc.insertRow(selectedIndex, row);//chèn dòng sau khi đã sửa
        saveData(DataController.PC);//lưu dữ liệu vào file PHONE
    }

    public void editLaptopCallback(Laptop laptop) {
        int selectedIndex = tblLaptop.getSelectedRow();
        laptops.set(selectedIndex, laptop);
        tableModelLaptop.removeRow(selectedIndex);//xóa dòng tại vị trí đã chọn
        Object[] row = new Object[]{
            laptop.getSerial(), laptop.getName(), laptop.getCpu(),
            laptop.getRam(), laptop.getDisk(), laptop.getVga(), laptop.getSize()
        };
        tableModelLaptop.insertRow(selectedIndex, row);//chèn dòng sau khi đã sửa
        saveData(DataController.LAPTOP);//lưu dữ liệu vào file PHONE
    }

    public void editMonitorCallback(Monitor monitor) {
        int selectedIndex = tblMonitor.getSelectedRow();
        monitors.set(selectedIndex, monitor);
        tableModelMonitor.removeRow(selectedIndex);//xóa dòng tại vị trí đã chọn
        Object[] row = new Object[]{
            monitor.getSerial(), monitor.getName(), monitor.getSize(),
            monitor.getResolution()
        };
        tableModelMonitor.insertRow(selectedIndex, row);//chèn dòng sau khi đã sửa
        saveData(DataController.MONITOR);//lưu dữ liệu vào file PHONE
    }

    public void editEmployeeCallback(Employee employee) {
        int selectedIndex = tblEmployee.getSelectedRow();
        employees.set(selectedIndex, employee);
        tableModelEmployee.removeRow(selectedIndex);//xóa dòng tại vị trí đã chọn
        Object[] row = new Object[]{
            employee.getEmployeeId(), employee.getFullName(), employee.getDob(),
            employee.getAddress(), employee.getPhoneNumber(),
            employee.getEmployeeEmail(), employee.getEmployeeDept()
        };
        tableModelEmployee.insertRow(selectedIndex, row);//chèn dòng sau khi đã sửa
        saveData(DataController.EMPLOYEE);//lưu dữ liệu vào file PHONE
    }

    private void sortPhones(Object obj) {
        if (obj.equals(rbSortPhoneNameASC)) {
            dataController.sortPhoneByNameASC(phones);
        } else if (obj.equals(rbSortPhoneNameDESC)) {
            dataController.sortPhoneByNameDESC(phones);
        } else if (obj.equals(rbSortPhonePhaseASC)) {
            dataController.sortPhoneByPhaseASC(phones);
        } else if (obj.equals(rbSortPhonePhaseDESC)) {
            dataController.sortPhoneByPhaseDESC(phones);
        }
        showPhones();
    }

    private void sortPcs(Object obj) {
        if (obj.equals(rbSortChipPcASC)) {
            dataController.sortPcByChipASC(pcs);
        } else if (obj.equals(rbSortChipPcDESC)) {
            dataController.sortPcByChipDESC(pcs);
        } else if (obj.equals(rbSortRamPcASC)) {
            dataController.sortPcByRamASC(pcs);
        } else if (obj.equals(rbSortRamPcDESC)) {
            dataController.sortPcByRamDESC(pcs);
        }
        showPcs();
    }

    private void sortLaptops(Object obj) {
        if (obj.equals(rbSortChipLaptopASC)) {
            dataController.sortLaptopByChipASC(laptops);
        } else if (obj.equals(rbSortChipLaptopDESC)) {
            dataController.sortLaptopByChipDESC(laptops);
        } else if (obj.equals(rbSortRamLaptopASC)) {
            dataController.sortLaptopByRamASC(laptops);
        } else if (obj.equals(rbSortRamLaptopDESC)) {
            dataController.sortLaptopByRamDESC(laptops);
        }
        showLaptops();
    }

    private void sortMonitors(Object obj) {
        if (obj.equals(rbSortNameMonitorASC)) {
            dataController.sortMonitorByNameASC(monitors);
        } else if (obj.equals(rbSortNameMonitorDESC)) {
            dataController.sortMonitorByNameDESC(monitors);
        } else if (obj.equals(rbSortSizeMonitorASC)) {
            dataController.sortMonitorBySizeASC(monitors);
        } else if (obj.equals(rbSortSizeMonitorDESC)) {
            dataController.sortMonitorBySizeDESC(monitors);
        }
        showMonitors();
    }

    private void sortEmployees(Object obj) {
        if (obj.equals(rbSortEmployeeNameASC)) {
            dataController.sortEmployeeByNameASC(employees);
        } else if (obj.equals(rbSortEmployeeNameDESC)) {
            dataController.sortEmployeeByNameDESC(employees);
        } else if (obj.equals(rbSortEmployeeIdASC)) {
            dataController.sortEmployeeByIdASC(employees);
        } else if (obj.equals(rbSortEmployeeIdDESC)) {
            dataController.sortEmployeeByIdDESC(employees);
        }
        showEmployees();
    }

    // sort borrowing by name, borrowing date
    private void sortBorrowings(Object obj) {
        if (obj.equals(rbSortBorrowingEmployeeNameASC)) {
            dataController.sortBorrowingByEmployeeNameASC(borrowings);
        } else if (obj.equals(rbSortBorrowingEmployeeNameDESC)) {
            dataController.sortBorrowingByEmployeeNameDESC(borrowings);
        } else if (obj.equals(rbSortBorrowingDateASC)) {
            dataController.sortBorrowingDateASC(borrowings);
        } else if (obj.equals(rbSortBorrowingDateDESC)) {
            dataController.sortBorrowingDateDESC(borrowings);
        }
        showBorrowings();
    }

    // sort give back by name, give back date
    private void sortGiveBacks(Object obj) {
        if (obj.equals(rbSortGiveBackNameASC)) {
            dataController.sortGiveBackByEmployeeNameASC(giveBacks);
        } else if (obj.equals(rbSortGiveBackNameDESC)) {
            dataController.sortGiveBackByEmployeeNameDESC(giveBacks);
        } else if (obj.equals(rbSortGiveBackDateASC)) {
            dataController.sortGiveBackDateASC(giveBacks);
        } else if (obj.equals(rbSortGiveBackDateDESC)) {
            dataController.sortGiveBackDateDESC(giveBacks);
        }
        showGiveBacks();
    }

    private void searchPhones() {
        if (rbSearchPhoneByImei.isSelected()) {
            var key = txtSearchPhoneByImei.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng nhập số IMEI cần tìm kiếm!";
                showDialogMessage(msg);
            } else {
                var result = dataController.searchPhoneByImei(phones, key);
                phones.clear();
                phones.addAll(result);
                checkAndShowSearchResult();
            }
        } else if (rbSearchPhoneByName.isSelected()) {
            var key = txtSearchPhoneByName.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng nhập tên điện thoại cần tìm kiếm!";
                showDialogMessage(msg);
            } else {
                var result = dataController.searchPhoneByName(phones, key);
                phones.clear();
                phones.addAll(result);
                checkAndShowSearchResult();
            }
        } else if (rbSearchPhoneByPhase.isSelected()) {
            var key = comboSearchPhoneByPhase.getSelectedItem().toString();
            var result = dataController.searchPhoneByPhase(phones, key);
            phones.clear();
            phones.addAll(result);
            checkAndShowSearchResult();

        } else {
            var msg = "Vui lòng chọn tiêu chí tìm kiếm trước!";
            showDialogMessage(msg);
        }
    }

    private void searchPcs() {
        if (rbSearchPcBySerial.isSelected()) {
            var key = txtSearchPcBySerial.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng nhập số serial cần tìm kiếm!";
                showDialogMessage(msg);
            } else {
                var result = dataController.searchPcBySerial(pcs, key);
                pcs.clear();
                pcs.addAll(result);
                checkAndShowSearchPcs();
            }
        } else if (rbSearchPcByName.isSelected()) {
            var key = txtSearchPcByName.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng nhập tên PC cần tìm kiếm!";
                showDialogMessage(msg);
            } else {
                var result = dataController.searchPcByName(pcs, key);
                pcs.clear();
                pcs.addAll(result);
                checkAndShowSearchPcs();
            }
        } else if (rbSearchPcByRam.isSelected()) {
            var key = txtSearchPcByRam.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng nhập dung lượng RAM cần tìm kiếm!";
                showDialogMessage(msg);
            } else {
                var result = dataController.searchPcByRam(pcs, key);
                pcs.clear();
                pcs.addAll(result);
                checkAndShowSearchPcs();
            }
        } else {
            var msg = "Vui lòng chọn tiêu chí tìm kiếm trước!";
            showDialogMessage(msg);
        }
    }

    private void searchLaptops() {
        if (rbSearchLaptopBySerial.isSelected()) {
            var key = txtSearchLaptopBySerial.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng nhập số serial cần tìm kiếm!";
                showDialogMessage(msg);
            } else {
                var result = dataController.searchLaptopBySerial(laptops, key);
                laptops.clear();
                laptops.addAll(result);
                checkAndShowSearchLaptops();
            }
        } else if (rbSearchLaptopByName.isSelected()) {
            var key = txtSearchLaptopByName.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng nhập tên PC cần tìm kiếm!";
                showDialogMessage(msg);
            } else {
                var result = dataController.searchLaptopByName(laptops, key);
                laptops.clear();
                laptops.addAll(result);
                checkAndShowSearchLaptops();
            }
        } else if (rbSearchLaptopByRam.isSelected()) {
            var key = txtSearchLaptopByRam.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng nhập dung lượng RAM cần tìm kiếm!";
                showDialogMessage(msg);
            } else {
                var result = dataController.searchLaptopByRam(laptops, key);
                laptops.clear();
                laptops.addAll(result);
                checkAndShowSearchLaptops();
            }
        } else {
            var msg = "Vui lòng chọn tiêu chí tìm kiếm trước!";
            showDialogMessage(msg);
        }
    }

    private void searchMonitors() {
        if (rbSearchMonitorBySerial.isSelected()) {
            var key = txtSearchMonitorBySerial.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng nhập số serial cần tìm kiếm!";
                showDialogMessage(msg);
            } else {
                var result = dataController.searchMonitorBySerial(monitors, key);
                monitors.clear();
                monitors.addAll(result);
                checkAndShowSearchMonitors();
            }
        } else if (rbSearchMonitorByName.isSelected()) {
            var key = txtSearchMonitorByName.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng nhập tên PC cần tìm kiếm!";
                showDialogMessage(msg);
            } else {
                var result = dataController.searchMonitorByName(monitors, key);
                monitors.clear();
                monitors.addAll(result);
                checkAndShowSearchMonitors();
            }
        } else if (rbSearchMonitorBySize.isSelected()) {
            var key = txtSearchMonitorBySize.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng nhập dung lượng RAM cần tìm kiếm!";
                showDialogMessage(msg);
            } else {
                var result = dataController.searchMonitorBySize(monitors, key);
                monitors.clear();
                monitors.addAll(result);
                checkAndShowSearchMonitors();
            }
        } else {
            var msg = "Vui lòng chọn tiêu chí tìm kiếm trước!";
            showDialogMessage(msg);
        }
    }

    private void searchEmployees() {
        if (rbSearchEmployeeById.isSelected()) {
            var key = txtSearchEmployeeById.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng nhập mã nhân viên cần tìm kiếm!";
                showDialogMessage(msg);
            } else {
                var result = dataController.searchEmployeeById(employees, key);
                employees.clear();
                employees.addAll(result);
                checkAndShowSearchEmployees();
            }
        } else if (rbSearchEmployeeByName.isSelected()) {
            var key = txtSearchEmployeeByName.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng nhập tên nhân viên cần tìm kiếm!";
                showDialogMessage(msg);
            } else {
                var result = dataController.searchEmployeeByName(employees, key);
                employees.clear();
                employees.addAll(result);
                checkAndShowSearchEmployees();
            }
        } else if (rbSearchEmployeeByDept.isSelected()) {
            var key = comboSearchEmployeeByDept.getSelectedItem().toString();
            var result = dataController.searchEmployeeByDept(employees, key);
            employees.clear();
            employees.addAll(result);
            checkAndShowSearchEmployees();

        } else {
            var msg = "Vui lòng chọn tiêu chí tìm kiếm trước!";
            showDialogMessage(msg);
        }
    }

    // tìm kiếm thiết bị mượn
    private void searchBorrowings() {
        if (rbSearchBorrowingBySerial.isSelected()) {   // tìm kiếm theo số serial
            var key = txtSearchBorrowingBySerial.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng nhập số IMEI/Serial cần tìm kiếm!";
                showDialogMessage(msg);
            } else {
                var result = dataController.searchBorrowingBySerial(borrowings, key);
                borrowings.clear();
                borrowings.addAll(result);
                checkAndShowSearchBorrowings();
            }
        } else if (rbSearchBorrowingByEmployeeName.isSelected()) {  // tìm kiếm theo nhân viên
            var key = txtSearchBorrowingByName.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng nhập tên nhân viên cần tìm kiếm!";
                showDialogMessage(msg);
            } else {
                var result = dataController.searchBorrowingByEmployeeName(borrowings, key);
                borrowings.clear();
                borrowings.addAll(result);
                checkAndShowSearchBorrowings();
            }
        } else if (rbSearchBorrowingByDate.isSelected()) {  // tìm kiếm theo ngày
            var fromDate = txtSearchBorrowingFrom.getText();
            var toDate = txtSearchBorrowingTo.getText();
            if (fromDate.isEmpty() || toDate.isEmpty()) {   // kiểm tra ngày đã nhập hay chưa
                var msg = "Vui lòng nhập thời gian cần tìm kiếm!";
                showDialogMessage(msg);
            } else {
                if (fromDate.equals(toDate)) {  // kiểm tra khi từ ngày = đến ngày
                    var msg = "Vui lòng nhập từ ngày và đến ngày khác nhau!";
                    showDialogMessage(msg);
                } else {
                    var result = dataController.searchBorrowingByDate(borrowings, fromDate, toDate);
                    borrowings.clear();
                    borrowings.addAll(result);
                    checkAndShowSearchBorrowings();
                }
            }
        } else {
            var msg = "Vui lòng chọn tiêu chí tìm kiếm trước!";
            showDialogMessage(msg);
        }
    }

    // tìm kiếm thiết bị trả
    private void searchGiveBacks() {
        if (rbSearchGiveBackBySerial.isSelected()) {    // tìm kiếm theo số serial
            var key = txtSearchGiveBackBySerial.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng nhập số IMEI/Serial cần tìm kiếm!";
                showDialogMessage(msg);
            } else {
                var result = dataController.searchGiveBackBySerial(giveBacks, key);
                giveBacks.clear();
                giveBacks.addAll(result);
                checkAndShowSearchGiveBacks();
            }
        } else if (rbSearchGiveBackByEmployeeName.isSelected()) {   // tìm kiếm theo nhân viên
            var key = txtSearchGiveBackByEmployeeName.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng nhập tên nhân viên cần tìm kiếm!";
                showDialogMessage(msg);
            } else {
                var result = dataController.searchGiveBackByEmployeeName(giveBacks, key);
                giveBacks.clear();
                giveBacks.addAll(result);
                checkAndShowSearchGiveBacks();
            }
        } else if (rbSearchGiveBackByDate.isSelected()) {   // tìm kiếm theo ngày
            var fromDate = txtSearchGiveBackFrom.getText();
            var toDate = txtSearchGiveBackTo.getText();
            if (fromDate.isEmpty() || toDate.isEmpty()) {
                var msg = "Vui lòng nhập thời gian cần tìm kiếm!";
                showDialogMessage(msg);
            } else {
                if (fromDate.equals(toDate)) {  // kiểm tra khi từ ngày = đến ngày
                    var msg = "Vui lòng nhập từ ngày và đến ngày khác nhau!";
                    showDialogMessage(msg);
                } else {
                    var result = dataController.searchGiveBackByDate(giveBacks, fromDate, toDate);
                    giveBacks.clear();
                    giveBacks.addAll(result);
                    checkAndShowSearchGiveBacks();
                }
            }
        } else {
            var msg = "Vui lòng chọn tiêu chí tìm kiếm trước!";
            showDialogMessage(msg);
        }
    }

    private void checkAndShowSearchResult() {
        if (phones.size() > 0) {
            showPhones();
            var msg = "Tìm thấy " + phones.size() + " kết quả";
            showDialogMessage(msg);
        } else {
            phones.clear();
            showPhones();
            var msg = "Không tìm thấy kết quả nào";
            showDialogMessage(msg);
        }
    }

    private void checkAndShowSearchPcs() {
        if (pcs.size() > 0) {
            showPcs();
            var msg = "Tìm thấy " + pcs.size() + " kết quả";
            showDialogMessage(msg);
        } else {
            pcs.clear();
            showPcs();
            var msg = "Không tìm thấy kết quả nào";
            showDialogMessage(msg);
        }
    }

    private void checkAndShowSearchLaptops() {
        if (laptops.size() > 0) {
            showLaptops();
            var msg = "Tìm thấy " + laptops.size() + " kết quả";
            showDialogMessage(msg);
        } else {
            laptops.clear();
            showLaptops();
            var msg = "Không tìm thấy kết quả nào";
            showDialogMessage(msg);
        }
    }

    private void checkAndShowSearchMonitors() {
        if (monitors.size() > 0) {
            showMonitors();
            var msg = "Tìm thấy " + monitors.size() + " kết quả";
            showDialogMessage(msg);
        } else {
            monitors.clear();
            showMonitors();
            var msg = "Không tìm thấy kết quả nào";
            showDialogMessage(msg);
        }
    }

    private void checkAndShowSearchEmployees() {
        if (employees.size() > 0) {
            showEmployees();
            var msg = "Tìm thấy " + employees.size() + " kết quả";
            showDialogMessage(msg);
        } else {
            employees.clear();
            showEmployees();
            var msg = "Không tìm thấy kết quả nào";
            showDialogMessage(msg);
        }
    }

    // kiểm tra và hiển thị thông tin sao khi sau khi tìm kiếm thiết bị mượn
    private void checkAndShowSearchBorrowings() {
        if (borrowings.size() > 0) {
            showBorrowings();
            var msg = "Tìm thấy " + borrowings.size() + " kết quả";
            showDialogMessage(msg);
        } else {
            borrowings.clear();
            showBorrowings();
            var msg = "Không tìm thấy kết quả nào";
            showDialogMessage(msg);
        }
    }

    // kiểm tra và hiển thị thông tin sao khi sau khi tìm kiếm thiết bị trả
    private void checkAndShowSearchGiveBacks() {
        if (giveBacks.size() > 0) {
            showGiveBacks();
            var msg = "Tìm thấy " + giveBacks.size() + " kết quả";
            showDialogMessage(msg);
        } else {
            giveBacks.clear();
            showGiveBacks();
            var msg = "Không tìm thấy kết quả nào";
            showDialogMessage(msg);
        }
    }

    private void refreshPhones() {
        var text = "";
        txtSearchPhoneByImei.setText(text);
        txtSearchPhoneByName.setText(text);
        comboSearchPhoneByPhase.setSelectedIndex(0);
        buttonGroupSearchPhone.clearSelection();
        buttonGroupSortPhone.clearSelection();

        phones.clear();
        phones.addAll(dataController.<Phone>readDataFromFile(DataController.PHONE_FILE));
        showPhones();

    }

    private void refreshPcs() {
        var text = "";
        txtSearchPcBySerial.setText(text);
        txtSearchPcByName.setText(text);
        txtSearchPcByRam.setText(text);
        buttonGroupSortPc.clearSelection();
        buttonGroupSearchPc.clearSelection();

        pcs.clear();
        pcs.addAll(dataController.<Pc>readDataFromFile(DataController.PC_FILE));
        showPcs();

    }

    private void refreshLaptops() {
        var text = "";
        txtSearchLaptopBySerial.setText(text);
        txtSearchLaptopByName.setText(text);
        txtSearchLaptopByRam.setText(text);
        buttonGroupSortLaptop.clearSelection();
        buttonGroupSearchLaptop.clearSelection();

        laptops.clear();
        laptops.addAll(dataController.<Laptop>readDataFromFile(DataController.LAPTOP_FILE));
        showLaptops();

    }

    private void refreshMonitors() {
        var text = "";
        txtSearchMonitorBySerial.setText(text);
        txtSearchMonitorByName.setText(text);
        txtSearchMonitorBySize.setText(text);
        buttonGroupSortMonitor.clearSelection();
        buttonGroupSearchMonitor.clearSelection();

        monitors.clear();
        monitors.addAll(dataController.<Monitor>readDataFromFile(DataController.MONITOR_FILE));
        showMonitors();

    }

    private void refreshEmployees() {
        var text = "";
        txtSearchEmployeeById.setText(text);
        txtSearchEmployeeByName.setText(text);
        comboSearchEmployeeByDept.setSelectedIndex(0);
        buttonGroupSortEmployee.clearSelection();
        buttonGroupSearchEmployee.clearSelection();

        employees.clear();
        employees.addAll(dataController.<Employee>readDataFromFile(DataController.EMPLOYEE_FILE));
        showEmployees();

    }

    // làm mới dữ liệu trong bảng mượn
    private void refreshBorrowings() {
        var text = "";
        txtSearchBorrowingBySerial.setText(text);
        txtSearchBorrowingByName.setText(text);
        txtSearchBorrowingFrom.setText(text);
        txtSearchBorrowingTo.setText(text);
        buttonGroupSortBorrowing.clearSelection();
        buttonGroupSearchBorrowing.clearSelection();
        // xóa và thêm mới dữ liệu
        borrowings.clear();
        borrowings.addAll(dataController.<Borrowing>readDataFromFile(DataController.BORROWING_FILE));
        showBorrowings();
    }

    // làm mới dữ liệu trong bảng trả
    private void refreshGiveBacks() {
        var text = "";
        txtSearchGiveBackBySerial.setText(text);
        txtSearchGiveBackByEmployeeName.setText(text);
        txtSearchGiveBackFrom.setText(text);
        txtSearchGiveBackTo.setText(text);
        buttonGroupSortGiveBack.clearSelection();
        buttonGroupSearchGiveBack.clearSelection();
        // xóa và thêm mới dữ liệu
        giveBacks.clear();
        giveBacks.addAll(dataController.<GiveBack>readDataFromFile(DataController.GIVE_BACK_FILE));
        showGiveBacks();
    }

    private void addBorrowing() {
        // hiển thị hộp thoại thêm các thiết bị và nhân viên
        AddBorrowingDialog addBorrowingDialog
                = new AddBorrowingDialog(this, true, employees, phones, borrowings, pcs, laptops, monitors);
        addBorrowingDialog.setVisible(true);
        txtTotalBorrowing.setText(String.valueOf(borrowings.size()));
    }

}
